{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Version, InjectionToken, inject, NgModule, Optional, Inject, LOCALE_ID, Injectable, Directive, ANIMATION_MODULE_TYPE, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, booleanAttribute, EventEmitter, Output, ViewChild, NgZone, ElementRef } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$1 } from '@angular/cdk';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { Platform, _isTestEnvironment, normalizePassiveListenerOptions, _getEventTarget } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/** Current version of Angular Material. */\nconst _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nconst _c1 = [\"*\", \"mat-option, ng-container\"];\nconst _c2 = [\"text\"];\nconst _c3 = [[[\"mat-icon\"]], \"*\"];\nconst _c4 = [\"mat-icon\", \"*\"];\nfunction MatOption_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled)(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\");\n  }\n}\nfunction MatOption_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled);\n  }\n}\nfunction MatOption_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r0.group.label, \")\");\n  }\n}\nconst _c5 = [\"mat-internal-form-field\", \"\"];\nconst _c6 = [\"*\"];\nconst VERSION = /*#__PURE__*/new Version('17.3.10');\n\n/** @docs-private */\nlet AnimationCurves = /*#__PURE__*/(() => {\n  class AnimationCurves {\n    static {\n      this.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n    }\n    static {\n      this.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n    }\n    static {\n      this.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n    }\n    static {\n      this.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n    }\n  }\n  return AnimationCurves;\n})();\n/** @docs-private */\nlet AnimationDurations = /*#__PURE__*/(() => {\n  class AnimationDurations {\n    static {\n      this.COMPLEX = '375ms';\n    }\n    static {\n      this.ENTERING = '225ms';\n    }\n    static {\n      this.EXITING = '195ms';\n    }\n  }\n  return AnimationDurations;\n})();\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n  return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = /*#__PURE__*/new InjectionToken('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nlet MatCommonModule = /*#__PURE__*/(() => {\n  class MatCommonModule {\n    constructor(highContrastModeDetector, _sanityChecks, _document) {\n      this._sanityChecks = _sanityChecks;\n      this._document = _document;\n      /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n      this._hasDoneGlobalChecks = false;\n      // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n      // in MatCommonModule.\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n      if (!this._hasDoneGlobalChecks) {\n        this._hasDoneGlobalChecks = true;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Inject in here so the reference to `Platform` can be removed in production mode.\n          const platform = inject(Platform, {\n            optional: true\n          });\n          if (this._checkIsEnabled('doctype')) {\n            _checkDoctypeIsDefined(this._document);\n          }\n          if (this._checkIsEnabled('theme')) {\n            _checkThemeIsPresent(this._document, !!platform?.isBrowser);\n          }\n          if (this._checkIsEnabled('version')) {\n            _checkCdkVersionMatch();\n          }\n        }\n      }\n    }\n    /** Gets whether a specific sanity check is enabled. */\n    _checkIsEnabled(name) {\n      if (_isTestEnvironment()) {\n        return false;\n      }\n      if (typeof this._sanityChecks === 'boolean') {\n        return this._sanityChecks;\n      }\n      return !!this._sanityChecks[name];\n    }\n    static {\n      this.ɵfac = function MatCommonModule_Factory(t) {\n        return new (t || MatCommonModule)(i0.ɵɵinject(i1.HighContrastModeDetector), i0.ɵɵinject(MATERIAL_SANITY_CHECKS, 8), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatCommonModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [BidiModule, BidiModule]\n      });\n    }\n  }\n  return MatCommonModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc) {\n  if (!doc.doctype) {\n    console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');\n  }\n}\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc, isBrowser) {\n  // We need to assert that the `body` is defined, because these checks run very early\n  // and the `body` won't be defined if the consumer put their scripts in the `head`.\n  if (!doc.body || !isBrowser) {\n    return;\n  }\n  const testElement = doc.createElement('div');\n  testElement.classList.add('mat-theme-loaded-marker');\n  doc.body.appendChild(testElement);\n  const computedStyle = getComputedStyle(testElement);\n  // In some situations the computed style of the test element can be null. For example in\n  // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  if (computedStyle && computedStyle.display !== 'none') {\n    console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');\n  }\n  testElement.remove();\n}\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch() {\n  if (VERSION.full !== VERSION$1.full) {\n    console.warn('The Angular Material version (' + VERSION.full + ') does not match ' + 'the Angular CDK version (' + VERSION$1.full + ').\\n' + 'Please ensure the versions of these two packages exactly match.');\n  }\n}\nfunction mixinDisabled(base) {\n  return class extends base {\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(...args) {\n      super(...args);\n      this._disabled = false;\n    }\n  };\n}\nfunction mixinColor(base, defaultColor) {\n  return class extends base {\n    get color() {\n      return this._color;\n    }\n    set color(value) {\n      const colorPalette = value || this.defaultColor;\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n        this._color = colorPalette;\n      }\n    }\n    constructor(...args) {\n      super(...args);\n      this.defaultColor = defaultColor;\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\nfunction mixinDisableRipple(base) {\n  return class extends base {\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() {\n      return this._disableRipple;\n    }\n    set disableRipple(value) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n    constructor(...args) {\n      super(...args);\n      this._disableRipple = false;\n    }\n  };\n}\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n  return class extends base {\n    get tabIndex() {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n    constructor(...args) {\n      super(...args);\n      this._tabIndex = defaultTabIndex;\n      this.defaultTabIndex = defaultTabIndex;\n    }\n  };\n}\n\n/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n  constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n    this._defaultMatcher = _defaultMatcher;\n    this.ngControl = ngControl;\n    this._parentFormGroup = _parentFormGroup;\n    this._parentForm = _parentForm;\n    this._stateChanges = _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    this.errorState = false;\n  }\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const matcher = this.matcher || this._defaultMatcher;\n    const control = this.ngControl ? this.ngControl.control : null;\n    const newState = matcher?.isErrorState(control, parent) ?? false;\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this._stateChanges.next();\n    }\n  }\n}\nfunction mixinErrorState(base) {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    get errorState() {\n      return this._getTracker().errorState;\n    }\n    set errorState(value) {\n      this._getTracker().errorState = value;\n    }\n    /** An object used to control the error state of the component. */\n    get errorStateMatcher() {\n      return this._getTracker().matcher;\n    }\n    set errorStateMatcher(value) {\n      this._getTracker().matcher = value;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      this._getTracker().updateErrorState();\n    }\n    _getTracker() {\n      if (!this._tracker) {\n        this._tracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, this.ngControl, this._parentFormGroup, this._parentForm, this.stateChanges);\n      }\n      return this._tracker;\n    }\n    constructor(...args) {\n      super(...args);\n    }\n  };\n}\n\n/**\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\n * @deprecated Track the initialized state manually.\n * @breaking-change 19.0.0\n */\nfunction mixinInitialized(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      /** Whether this directive has been marked as initialized. */\n      this._isInitialized = false;\n      /**\n       * List of subscribers that subscribed before the directive was initialized. Should be notified\n       * during _markInitialized. Set to null after pending subscribers are notified, and should\n       * not expect to be populated after.\n       */\n      this._pendingSubscribers = [];\n      /**\n       * Observable stream that emits when the directive initializes. If already initialized, the\n       * subscriber is stored to be notified once _markInitialized is called.\n       */\n      this.initialized = new Observable(subscriber => {\n        // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n        // when _markInitialized is called.\n        if (this._isInitialized) {\n          this._notifySubscriber(subscriber);\n        } else {\n          this._pendingSubscribers.push(subscriber);\n        }\n      });\n    }\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized() {\n      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');\n      }\n      this._isInitialized = true;\n      this._pendingSubscribers.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber) {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = /*#__PURE__*/new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n  constructor() {\n    this._localeChanges = new Subject();\n    /** A stream that emits when the locale changes. */\n    this.localeChanges = this._localeChanges;\n  }\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj) {\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first, second) {\n    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first, second) {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date, min, max) {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\nconst MAT_DATE_FORMATS = /*#__PURE__*/new InjectionToken('mat-date-formats');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nlet NativeDateAdapter = /*#__PURE__*/(() => {\n  class NativeDateAdapter extends DateAdapter {\n    constructor(\n    /**\n     * @deprecated Now injected via inject(), param to be removed.\n     * @breaking-change 18.0.0\n     */\n    matDateLocale) {\n      super();\n      /**\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 14.0.0\n       */\n      this.useUtcForDisplay = false;\n      /** The injected locale. */\n      this._matDateLocale = inject(MAT_DATE_LOCALE, {\n        optional: true\n      });\n      if (matDateLocale !== undefined) {\n        this._matDateLocale = matDateLocale;\n      }\n      super.setLocale(this._matDateLocale);\n    }\n    getYear(date) {\n      return date.getFullYear();\n    }\n    getMonth(date) {\n      return date.getMonth();\n    }\n    getDate(date) {\n      return date.getDate();\n    }\n    getDayOfWeek(date) {\n      return date.getDay();\n    }\n    getMonthNames(style) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        month: style,\n        timeZone: 'utc'\n      });\n      return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n    }\n    getDateNames() {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc'\n      });\n      return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getDayOfWeekNames(style) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        weekday: style,\n        timeZone: 'utc'\n      });\n      return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getYearName(date) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        timeZone: 'utc'\n      });\n      return this._format(dtf, date);\n    }\n    getFirstDayOfWeek() {\n      // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n      return 0;\n    }\n    getNumDaysInMonth(date) {\n      return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n      return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n          throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n        if (date < 1) {\n          throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n      }\n      let result = this._createDateWithOverflow(year, month, date);\n      // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n      if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n      }\n      return result;\n    }\n    today() {\n      return new Date();\n    }\n    parse(value, parseFormat) {\n      // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n      // parameters.\n      if (typeof value == 'number') {\n        return new Date(value);\n      }\n      return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n      if (!this.isValid(date)) {\n        throw Error('NativeDateAdapter: Cannot format invalid date.');\n      }\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        ...displayFormat,\n        timeZone: 'utc'\n      });\n      return this._format(dtf, date);\n    }\n    addCalendarYears(date, years) {\n      return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n      let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n      // It's possible to wind up in the wrong month if the original month has more days than the new\n      // month. In this case we want to go to the last day of the desired month.\n      // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n      // guarantee this.\n      if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n      }\n      return newDate;\n    }\n    addCalendarDays(date, days) {\n      return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n      return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n        // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n        // string is the right format first.\n        if (ISO_8601_REGEX.test(value)) {\n          let date = new Date(value);\n          if (this.isValid(date)) {\n            return date;\n          }\n        }\n      }\n      return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n      return obj instanceof Date;\n    }\n    isValid(date) {\n      return !isNaN(date.getTime());\n    }\n    invalid() {\n      return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n      // To work around this we use `setFullYear` and `setHours` instead.\n      const d = new Date();\n      d.setFullYear(year, month, date);\n      d.setHours(0, 0, 0, 0);\n      return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n      return ('00' + n).slice(-2);\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n      // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n      const d = new Date();\n      d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n      d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      return dtf.format(d);\n    }\n    static {\n      this.ɵfac = function NativeDateAdapter_Factory(t) {\n        return new (t || NativeDateAdapter)(i0.ɵɵinject(MAT_DATE_LOCALE, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: NativeDateAdapter,\n        factory: NativeDateAdapter.ɵfac\n      });\n    }\n  }\n  return NativeDateAdapter;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    }\n  }\n};\nlet NativeDateModule = /*#__PURE__*/(() => {\n  class NativeDateModule {\n    static {\n      this.ɵfac = function NativeDateModule_Factory(t) {\n        return new (t || NativeDateModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: NativeDateModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [{\n          provide: DateAdapter,\n          useClass: NativeDateAdapter\n        }]\n      });\n    }\n  }\n  return NativeDateModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatNativeDateModule = /*#__PURE__*/(() => {\n  class MatNativeDateModule {\n    static {\n      this.ɵfac = function MatNativeDateModule_Factory(t) {\n        return new (t || MatNativeDateModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatNativeDateModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [provideNativeDateAdapter()]\n      });\n    }\n  }\n  return MatNativeDateModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideNativeDateAdapter(formats = MAT_NATIVE_DATE_FORMATS) {\n  return [{\n    provide: DateAdapter,\n    useClass: NativeDateAdapter\n  }, {\n    provide: MAT_DATE_FORMATS,\n    useValue: formats\n  }];\n}\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nlet ShowOnDirtyErrorStateMatcher = /*#__PURE__*/(() => {\n  class ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n      return !!(control && control.invalid && (control.dirty || form && form.submitted));\n    }\n    static {\n      this.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {\n        return new (t || ShowOnDirtyErrorStateMatcher)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ShowOnDirtyErrorStateMatcher,\n        factory: ShowOnDirtyErrorStateMatcher.ɵfac\n      });\n    }\n  }\n  return ShowOnDirtyErrorStateMatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nlet ErrorStateMatcher = /*#__PURE__*/(() => {\n  class ErrorStateMatcher {\n    isErrorState(control, form) {\n      return !!(control && control.invalid && (control.touched || form && form.submitted));\n    }\n    static {\n      this.ɵfac = function ErrorStateMatcher_Factory(t) {\n        return new (t || ErrorStateMatcher)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ErrorStateMatcher,\n        factory: ErrorStateMatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ErrorStateMatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nlet MatLine = /*#__PURE__*/(() => {\n  class MatLine {\n    static {\n      this.ɵfac = function MatLine_Factory(t) {\n        return new (t || MatLine)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatLine,\n        selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]],\n        hostAttrs: [1, \"mat-line\"],\n        standalone: true\n      });\n    }\n  }\n  return MatLine;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({\n    length\n  }) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\nlet MatLineModule = /*#__PURE__*/(() => {\n  class MatLineModule {\n    static {\n      this.ɵfac = function MatLineModule_Factory(t) {\n        return new (t || MatLineModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatLineModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatLineModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Possible states for a ripple element. */\nvar RippleState = /*#__PURE__*/function (RippleState) {\n  RippleState[RippleState[\"FADING_IN\"] = 0] = \"FADING_IN\";\n  RippleState[RippleState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  RippleState[RippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n  RippleState[RippleState[\"HIDDEN\"] = 3] = \"HIDDEN\";\n  return RippleState;\n}(RippleState || {});\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n  constructor(_renderer, /** Reference to the ripple HTML element. */\n  element, /** Ripple configuration used for the ripple. */\n  config, /* Whether animations are forcibly disabled for ripples through CSS. */\n  _animationForciblyDisabledThroughCss = false) {\n    this._renderer = _renderer;\n    this.element = element;\n    this.config = config;\n    this._animationForciblyDisabledThroughCss = _animationForciblyDisabledThroughCss;\n    /** Current state of the ripple. */\n    this.state = RippleState.HIDDEN;\n  }\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions$1 = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nclass RippleEventManager {\n  constructor() {\n    this._events = new Map();\n    /** Event handler that is bound and which dispatches the events to the different targets. */\n    this._delegateEventHandler = event => {\n      const target = _getEventTarget(event);\n      if (target) {\n        this._events.get(event.type)?.forEach((handlers, element) => {\n          if (element === target || element.contains(target)) {\n            handlers.forEach(handler => handler.handleEvent(event));\n          }\n        });\n      }\n    };\n  }\n  /** Adds an event handler. */\n  addHandler(ngZone, name, element, handler) {\n    const handlersForEvent = this._events.get(name);\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n      });\n    }\n  }\n  /** Removes an event handler. */\n  removeHandler(name, element, handler) {\n    const handlersForEvent = this._events.get(name);\n    if (!handlersForEvent) {\n      return;\n    }\n    const handlersForElement = handlersForEvent.get(element);\n    if (!handlersForElement) {\n      return;\n    }\n    handlersForElement.delete(handler);\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n    }\n  }\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n  static {\n    this._eventManager = /*#__PURE__*/new RippleEventManager();\n  }\n  constructor(_target, _ngZone, elementOrElementRef, _platform) {\n    this._target = _target;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** Whether the pointer is currently down or not. */\n    this._isPointerDown = false;\n    /**\n     * Map of currently active ripple references.\n     * The ripple reference is mapped to its element event listeners.\n     * The reason why `| null` is used is that event listeners are added only\n     * when the condition is truthy (see the `_startFadeOutTransition` method).\n     */\n    this._activeRipples = new Map();\n    /** Whether pointer-up event listeners have been registered. */\n    this._pointerUpEventsRegistered = false;\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x, y, config = {}) {\n    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {\n      ...defaultRippleAnimationConfig,\n      ...config.animation\n    };\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n    this._containerElement.appendChild(ripple);\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss = userTransitionProperty === 'none' ||\n    // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n    // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n    userTransitionDuration === '0s' || userTransitionDuration === '0s, 0s' ||\n    // If the container is 0x0, it's likely `display: none`.\n    containerRect.width === 0 && containerRect.height === 0;\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n    rippleRef.state = RippleState.FADING_IN;\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n    let eventListeners = null;\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => this._finishRippleTransition(rippleRef);\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {\n          onTransitionEnd,\n          onTransitionCancel\n        };\n      });\n    }\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n    return rippleRef;\n  }\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n    const rippleEl = rippleRef.element;\n    const animationConfig = {\n      ...defaultRippleAnimationConfig,\n      ...rippleRef.config.animation\n    };\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef) {\n    const element = coerceElement(elementOrElementRef);\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event);\n    } else {\n      this._onPointerUp();\n    }\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  _finishRippleTransition(rippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  _startFadeOutTransition(rippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {\n      persistent\n    } = rippleRef.config;\n    rippleRef.state = RippleState.VISIBLE;\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  _destroyRipple(rippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n    }\n    rippleRef.element.remove();\n  }\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  _onMousedown(event) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n  /** Function being called whenever the trigger is being pressed using touch. */\n  _onTouchStart(event) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n  /** Function being called whenever the trigger is being released. */\n  _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n    this._isPointerDown = false;\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE || ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  _getActiveRipples() {\n    return Array.from(this._activeRipples.keys());\n  }\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n    if (trigger) {\n      pointerDownEvents.forEach(type => RippleRenderer._eventManager.removeHandler(type, trigger, this));\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type => trigger.removeEventListener(type, this, passiveCapturingEventOptions));\n        this._pointerUpEventsRegistered = false;\n      }\n    }\n  }\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = /*#__PURE__*/new InjectionToken('mat-ripple-global-options');\nlet MatRipple = /*#__PURE__*/(() => {\n  class MatRipple {\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      if (value) {\n        this.fadeOutAllNonPersistent();\n      }\n      this._disabled = value;\n      this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() {\n      return this._trigger || this._elementRef.nativeElement;\n    }\n    set trigger(trigger) {\n      this._trigger = trigger;\n      this._setupTriggerEventsIfEnabled();\n    }\n    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n      this._elementRef = _elementRef;\n      this._animationMode = _animationMode;\n      /**\n       * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n       * will be the distance from the center of the ripple to the furthest corner of the host element's\n       * bounding rectangle.\n       */\n      this.radius = 0;\n      this._disabled = false;\n      /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n      this._isInitialized = false;\n      this._globalOptions = globalOptions || {};\n      this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n    }\n    ngOnInit() {\n      this._isInitialized = true;\n      this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n      this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n      this._rippleRenderer.fadeOutAll();\n    }\n    /** Fades out all currently showing non-persistent ripple elements. */\n    fadeOutAllNonPersistent() {\n      this._rippleRenderer.fadeOutAllNonPersistent();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n      return {\n        centered: this.centered,\n        radius: this.radius,\n        color: this.color,\n        animation: {\n          ...this._globalOptions.animation,\n          ...(this._animationMode === 'NoopAnimations' ? {\n            enterDuration: 0,\n            exitDuration: 0\n          } : {}),\n          ...this.animation\n        },\n        terminateOnPointerUp: this._globalOptions.terminateOnPointerUp\n      };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n      return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n      if (!this.disabled && this._isInitialized) {\n        this._rippleRenderer.setupTriggerEvents(this.trigger);\n      }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n      if (typeof configOrX === 'number') {\n        return this._rippleRenderer.fadeInRipple(configOrX, y, {\n          ...this.rippleConfig,\n          ...config\n        });\n      } else {\n        return this._rippleRenderer.fadeInRipple(0, 0, {\n          ...this.rippleConfig,\n          ...configOrX\n        });\n      }\n    }\n    static {\n      this.ɵfac = function MatRipple_Factory(t) {\n        return new (t || MatRipple)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.Platform), i0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatRipple,\n        selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]],\n        hostAttrs: [1, \"mat-ripple\"],\n        hostVars: 2,\n        hostBindings: function MatRipple_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n          }\n        },\n        inputs: {\n          color: [i0.ɵɵInputFlags.None, \"matRippleColor\", \"color\"],\n          unbounded: [i0.ɵɵInputFlags.None, \"matRippleUnbounded\", \"unbounded\"],\n          centered: [i0.ɵɵInputFlags.None, \"matRippleCentered\", \"centered\"],\n          radius: [i0.ɵɵInputFlags.None, \"matRippleRadius\", \"radius\"],\n          animation: [i0.ɵɵInputFlags.None, \"matRippleAnimation\", \"animation\"],\n          disabled: [i0.ɵɵInputFlags.None, \"matRippleDisabled\", \"disabled\"],\n          trigger: [i0.ɵɵInputFlags.None, \"matRippleTrigger\", \"trigger\"]\n        },\n        exportAs: [\"matRipple\"],\n        standalone: true\n      });\n    }\n  }\n  return MatRipple;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatRippleModule = /*#__PURE__*/(() => {\n  class MatRippleModule {\n    static {\n      this.ɵfac = function MatRippleModule_Factory(t) {\n        return new (t || MatRippleModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatRippleModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatRippleModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nlet MatPseudoCheckbox = /*#__PURE__*/(() => {\n  class MatPseudoCheckbox {\n    constructor(_animationMode) {\n      this._animationMode = _animationMode;\n      /** Display state of the checkbox. */\n      this.state = 'unchecked';\n      /** Whether the checkbox is disabled. */\n      this.disabled = false;\n      /**\n       * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n       * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n       */\n      this.appearance = 'full';\n    }\n    static {\n      this.ɵfac = function MatPseudoCheckbox_Factory(t) {\n        return new (t || MatPseudoCheckbox)(i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatPseudoCheckbox,\n        selectors: [[\"mat-pseudo-checkbox\"]],\n        hostAttrs: [1, \"mat-pseudo-checkbox\"],\n        hostVars: 12,\n        hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"mat-pseudo-checkbox-minimal\", ctx.appearance === \"minimal\")(\"mat-pseudo-checkbox-full\", ctx.appearance === \"full\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n          }\n        },\n        inputs: {\n          state: \"state\",\n          disabled: \"disabled\",\n          appearance: \"appearance\"\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 0,\n        vars: 0,\n        template: function MatPseudoCheckbox_Template(rf, ctx) {},\n        styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color);border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color);border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatPseudoCheckbox;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatPseudoCheckboxModule = /*#__PURE__*/(() => {\n  class MatPseudoCheckboxModule {\n    static {\n      this.ɵfac = function MatPseudoCheckboxModule_Factory(t) {\n        return new (t || MatPseudoCheckboxModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatPseudoCheckboxModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule]\n      });\n    }\n  }\n  return MatPseudoCheckboxModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = /*#__PURE__*/new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = /*#__PURE__*/new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nlet MatOptgroup = /*#__PURE__*/(() => {\n  class MatOptgroup {\n    constructor(parent) {\n      /** whether the option group is disabled. */\n      this.disabled = false;\n      /** Unique id for the underlying label. */\n      this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n      this._inert = parent?.inertGroups ?? false;\n    }\n    static {\n      this.ɵfac = function MatOptgroup_Factory(t) {\n        return new (t || MatOptgroup)(i0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatOptgroup,\n        selectors: [[\"mat-optgroup\"]],\n        hostAttrs: [1, \"mat-mdc-optgroup\"],\n        hostVars: 3,\n        hostBindings: function MatOptgroup_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"role\", ctx._inert ? null : \"group\")(\"aria-disabled\", ctx._inert ? null : ctx.disabled.toString())(\"aria-labelledby\", ctx._inert ? null : ctx._labelId);\n          }\n        },\n        inputs: {\n          label: \"label\",\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute]\n        },\n        exportAs: [\"matOptgroup\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_OPTGROUP,\n          useExisting: MatOptgroup\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 5,\n        vars: 4,\n        consts: [[\"role\", \"presentation\", 1, \"mat-mdc-optgroup-label\", 3, \"id\"], [1, \"mdc-list-item__primary-text\"]],\n        template: function MatOptgroup_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c0);\n            i0.ɵɵelementStart(0, \"span\", 0)(1, \"span\", 1);\n            i0.ɵɵtext(2);\n            i0.ɵɵprojection(3);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵprojection(4, 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mdc-list-item--disabled\", ctx.disabled);\n            i0.ɵɵproperty(\"id\", ctx._labelId);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\"\", ctx.label, \" \");\n          }\n        },\n        styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color);font-family:var(--mat-optgroup-label-text-font);line-height:var(--mat-optgroup-label-text-line-height);font-size:var(--mat-optgroup-label-text-size);letter-spacing:var(--mat-optgroup-label-text-tracking);font-weight:var(--mat-optgroup-label-text-weight)}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;min-height:48px}.mat-mdc-optgroup-label:focus{outline:none}[dir=rtl] .mat-mdc-optgroup-label,.mat-mdc-optgroup-label[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatOptgroup;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n  constructor(/** Reference to the option that emitted the event. */\n  source, /** Whether the change in the option's value was a result of a user action. */\n  isUserInput = false) {\n    this.source = source;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nlet MatOption = /*#__PURE__*/(() => {\n  class MatOption {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n      return this._parent && this._parent.multiple;\n    }\n    /** Whether or not the option is currently selected. */\n    get selected() {\n      return this._selected;\n    }\n    /** Whether the option is disabled. */\n    get disabled() {\n      return this.group && this.group.disabled || this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n      return !!(this._parent && this._parent.disableRipple);\n    }\n    /** Whether to display checkmark for single-selection. */\n    get hideSingleSelectionIndicator() {\n      return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n    }\n    constructor(_element, _changeDetectorRef, _parent, group) {\n      this._element = _element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._parent = _parent;\n      this.group = group;\n      this._selected = false;\n      this._active = false;\n      this._disabled = false;\n      this._mostRecentViewValue = '';\n      /** The unique ID of the option. */\n      this.id = `mat-option-${_uniqueIdCounter++}`;\n      /** Event emitted when the option is selected or deselected. */\n      // tslint:disable-next-line:no-output-on-prefix\n      this.onSelectionChange = new EventEmitter();\n      /** Emits when the state of the option changes and any parents have to be notified. */\n      this._stateChanges = new Subject();\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n      return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n      // TODO(kara): Add input property alternative for node envs.\n      return (this._text?.nativeElement.textContent || '').trim();\n    }\n    /** Selects the option. */\n    select(emitEvent = true) {\n      if (!this._selected) {\n        this._selected = true;\n        this._changeDetectorRef.markForCheck();\n        if (emitEvent) {\n          this._emitSelectionChangeEvent();\n        }\n      }\n    }\n    /** Deselects the option. */\n    deselect(emitEvent = true) {\n      if (this._selected) {\n        this._selected = false;\n        this._changeDetectorRef.markForCheck();\n        if (emitEvent) {\n          this._emitSelectionChangeEvent();\n        }\n      }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n      // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n      // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n      const element = this._getHostElement();\n      if (typeof element.focus === 'function') {\n        element.focus(options);\n      }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n      if (!this._active) {\n        this._active = true;\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n      if (this._active) {\n        this._active = false;\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n      return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n      if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n        this._selectViaInteraction();\n        // Prevent the page from scrolling down and form submits.\n        event.preventDefault();\n      }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n      if (!this.disabled) {\n        this._selected = this.multiple ? !this._selected : true;\n        this._changeDetectorRef.markForCheck();\n        this._emitSelectionChangeEvent(true);\n      }\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n    // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n    // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n    _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n      return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n      // Since parent components could be using the option's label to display the selected values\n      // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n      // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n      // relatively cheap, however we still limit them only to selected options in order to avoid\n      // hitting the DOM too often.\n      if (this._selected) {\n        const viewValue = this.viewValue;\n        if (viewValue !== this._mostRecentViewValue) {\n          if (this._mostRecentViewValue) {\n            this._stateChanges.next();\n          }\n          this._mostRecentViewValue = viewValue;\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n      this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n    static {\n      this.ɵfac = function MatOption_Factory(t) {\n        return new (t || MatOption)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8), i0.ɵɵdirectiveInject(MAT_OPTGROUP, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatOption,\n        selectors: [[\"mat-option\"]],\n        viewQuery: function MatOption_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c2, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._text = _t.first);\n          }\n        },\n        hostAttrs: [\"role\", \"option\", 1, \"mat-mdc-option\", \"mdc-list-item\"],\n        hostVars: 11,\n        hostBindings: function MatOption_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() {\n              return ctx._selectViaInteraction();\n            })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) {\n              return ctx._handleKeydown($event);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵhostProperty(\"id\", ctx.id);\n            i0.ɵɵattribute(\"aria-selected\", ctx.selected)(\"aria-disabled\", ctx.disabled.toString());\n            i0.ɵɵclassProp(\"mdc-list-item--selected\", ctx.selected)(\"mat-mdc-option-multiple\", ctx.multiple)(\"mat-mdc-option-active\", ctx.active)(\"mdc-list-item--disabled\", ctx.disabled);\n          }\n        },\n        inputs: {\n          value: \"value\",\n          id: \"id\",\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute]\n        },\n        outputs: {\n          onSelectionChange: \"onSelectionChange\"\n        },\n        exportAs: [\"matOption\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c4,\n        decls: 8,\n        vars: 5,\n        consts: [[\"text\", \"\"], [\"aria-hidden\", \"true\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\", \"state\"], [1, \"mdc-list-item__primary-text\"], [\"state\", \"checked\", \"aria-hidden\", \"true\", \"appearance\", \"minimal\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\"], [1, \"cdk-visually-hidden\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-mdc-option-ripple\", \"mat-mdc-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n        template: function MatOption_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c3);\n            i0.ɵɵtemplate(0, MatOption_Conditional_0_Template, 1, 2, \"mat-pseudo-checkbox\", 1);\n            i0.ɵɵprojection(1);\n            i0.ɵɵelementStart(2, \"span\", 2, 0);\n            i0.ɵɵprojection(4, 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(5, MatOption_Conditional_5_Template, 1, 1, \"mat-pseudo-checkbox\", 3)(6, MatOption_Conditional_6_Template, 2, 1, \"span\", 4);\n            i0.ɵɵelement(7, \"div\", 5);\n          }\n          if (rf & 2) {\n            i0.ɵɵconditional(0, ctx.multiple ? 0 : -1);\n            i0.ɵɵadvance(5);\n            i0.ɵɵconditional(5, !ctx.multiple && ctx.selected && !ctx.hideSingleSelectionIndicator ? 5 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(6, ctx.group && ctx.group._inert ? 6 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n          }\n        },\n        dependencies: [MatPseudoCheckbox, MatRipple],\n        styles: [\".mat-mdc-option{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color);font-family:var(--mat-option-label-text-font);line-height:var(--mat-option-label-text-line-height);font-size:var(--mat-option-label-text-size);letter-spacing:var(--mat-option-label-text-tracking);font-weight:var(--mat-option-label-text-weight);min-height:48px}.mat-mdc-option:focus{outline:none}[dir=rtl] .mat-mdc-option,.mat-mdc-option[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color)}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color)}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}.cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{right:auto;left:16px}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatOption;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n    return groupCounter;\n  }\n  return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n  return currentScrollPosition;\n}\nlet MatOptionModule = /*#__PURE__*/(() => {\n  class MatOptionModule {\n    static {\n      this.ɵfac = function MatOptionModule_Factory(t) {\n        return new (t || MatOptionModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatOptionModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule]\n      });\n    }\n  }\n  return MatOptionModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {\n  capture: true\n};\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n *\n * @docs-private\n */\nlet MatRippleLoader = /*#__PURE__*/(() => {\n  class MatRippleLoader {\n    constructor() {\n      this._document = inject(DOCUMENT, {\n        optional: true\n      });\n      this._animationMode = inject(ANIMATION_MODULE_TYPE, {\n        optional: true\n      });\n      this._globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n        optional: true\n      });\n      this._platform = inject(Platform);\n      this._ngZone = inject(NgZone);\n      this._hosts = new Map();\n      /** Handles creating and attaching component internals when a component it is initially interacted with. */\n      this._onInteraction = event => {\n        if (!(event.target instanceof HTMLElement)) {\n          return;\n        }\n        const eventTarget = event.target;\n        // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n        const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n        if (element) {\n          this._createRipple(element);\n        }\n      };\n      this._ngZone.runOutsideAngular(() => {\n        for (const event of rippleInteractionEvents) {\n          this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n        }\n      });\n    }\n    ngOnDestroy() {\n      const hosts = this._hosts.keys();\n      for (const host of hosts) {\n        this.destroyRipple(host);\n      }\n      for (const event of rippleInteractionEvents) {\n        this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    }\n    /**\n     * Configures the ripple that will be rendered by the ripple loader.\n     *\n     * Stores the given information about how the ripple should be configured on the host\n     * element so that it can later be retrived & used when the ripple is actually created.\n     */\n    configureRipple(host, config) {\n      // Indicates that the ripple has not yet been rendered for this component.\n      host.setAttribute(matRippleUninitialized, '');\n      // Store the additional class name(s) that should be added to the ripple element.\n      if (config.className || !host.hasAttribute(matRippleClassName)) {\n        host.setAttribute(matRippleClassName, config.className || '');\n      }\n      // Store whether the ripple should be centered.\n      if (config.centered) {\n        host.setAttribute(matRippleCentered, '');\n      }\n      if (config.disabled) {\n        host.setAttribute(matRippleDisabled, '');\n      }\n    }\n    /** Returns the ripple instance for the given host element. */\n    getRipple(host) {\n      const ripple = this._hosts.get(host);\n      return ripple || this._createRipple(host);\n    }\n    /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n    setDisabled(host, disabled) {\n      const ripple = this._hosts.get(host);\n      // If the ripple has already been instantiated, just disable it.\n      if (ripple) {\n        ripple.disabled = disabled;\n        return;\n      }\n      // Otherwise, set an attribute so we know what the\n      // disabled state should be when the ripple is initialized.\n      if (disabled) {\n        host.setAttribute(matRippleDisabled, '');\n      } else {\n        host.removeAttribute(matRippleDisabled);\n      }\n    }\n    /** Creates a MatRipple and appends it to the given element. */\n    _createRipple(host) {\n      if (!this._document) {\n        return;\n      }\n      const existingRipple = this._hosts.get(host);\n      if (existingRipple) {\n        return existingRipple;\n      }\n      // Create the ripple element.\n      host.querySelector('.mat-ripple')?.remove();\n      const rippleEl = this._document.createElement('span');\n      rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName));\n      host.append(rippleEl);\n      // Create the MatRipple.\n      const ripple = new MatRipple(new ElementRef(rippleEl), this._ngZone, this._platform, this._globalRippleOptions ? this._globalRippleOptions : undefined, this._animationMode ? this._animationMode : undefined);\n      ripple._isInitialized = true;\n      ripple.trigger = host;\n      ripple.centered = host.hasAttribute(matRippleCentered);\n      ripple.disabled = host.hasAttribute(matRippleDisabled);\n      this.attachRipple(host, ripple);\n      return ripple;\n    }\n    attachRipple(host, ripple) {\n      host.removeAttribute(matRippleUninitialized);\n      this._hosts.set(host, ripple);\n    }\n    destroyRipple(host) {\n      const ripple = this._hosts.get(host);\n      if (ripple) {\n        // Since this directive is created manually, it needs to be destroyed manually too.\n        // tslint:disable-next-line:no-lifecycle-invocation\n        ripple.ngOnDestroy();\n        this._hosts.delete(host);\n      }\n    }\n    static {\n      this.ɵfac = function MatRippleLoader_Factory(t) {\n        return new (t || MatRippleLoader)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MatRippleLoader,\n        factory: MatRippleLoader.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MatRippleLoader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Internal shared component used as a container in form field controls.\n * Not to be confused with `mat-form-field` which MDC calls a \"text field\".\n * @docs-private\n */\nlet _MatInternalFormField = /*#__PURE__*/(() => {\n  class _MatInternalFormField {\n    static {\n      this.ɵfac = function _MatInternalFormField_Factory(t) {\n        return new (t || _MatInternalFormField)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: _MatInternalFormField,\n        selectors: [[\"div\", \"mat-internal-form-field\", \"\"]],\n        hostAttrs: [1, \"mdc-form-field\", \"mat-internal-form-field\"],\n        hostVars: 2,\n        hostBindings: function _MatInternalFormField_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mdc-form-field--align-end\", ctx.labelPosition === \"before\");\n          }\n        },\n        inputs: {\n          labelPosition: \"labelPosition\"\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        attrs: _c5,\n        ngContentSelectors: _c6,\n        decls: 1,\n        vars: 0,\n        template: function _MatInternalFormField_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        styles: [\".mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field[hidden]{display:none}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mdc-form-field{font-family:var(--mdc-form-field-label-text-font);line-height:var(--mdc-form-field-label-text-line-height);font-size:var(--mdc-form-field-label-text-size);font-weight:var(--mdc-form-field-label-text-weight);letter-spacing:var(--mdc-form-field-label-text-tracking);color:var(--mdc-form-field-label-text-color)}.mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return _MatInternalFormField;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleLoader, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, RippleState, ShowOnDirtyErrorStateMatcher, VERSION, _ErrorStateTracker, _MatInternalFormField, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, provideNativeDateAdapter, setLines };","map":{"version":3,"names":["i0","Version","InjectionToken","inject","NgModule","Optional","Inject","LOCALE_ID","Injectable","Directive","ANIMATION_MODULE_TYPE","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","booleanAttribute","EventEmitter","Output","ViewChild","NgZone","ElementRef","i1","isFakeMousedownFromScreenReader","isFakeTouchstartFromScreenReader","BidiModule","VERSION","VERSION$1","DOCUMENT","i1$1","Platform","_isTestEnvironment","normalizePassiveListenerOptions","_getEventTarget","coerceBooleanProperty","coerceNumberProperty","coerceElement","Observable","Subject","startWith","ENTER","SPACE","hasModifierKey","_c0","_c1","_c2","_c3","_c4","MatOption_Conditional_0_Template","rf","ctx","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","disabled","selected","MatOption_Conditional_5_Template","MatOption_Conditional_6_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","group","label","_c5","_c6","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","ACCELERATION_CURVE","SHARP_CURVE","AnimationDurations","COMPLEX","ENTERING","EXITING","MATERIAL_SANITY_CHECKS_FACTORY","MATERIAL_SANITY_CHECKS","providedIn","factory","MatCommonModule","constructor","highContrastModeDetector","_sanityChecks","_document","_hasDoneGlobalChecks","_applyBodyHighContrastModeCssClasses","ngDevMode","platform","optional","_checkIsEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isBrowser","_checkCdkVersionMatch","name","ɵfac","MatCommonModule_Factory","t","ɵɵinject","HighContrastModeDetector","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","imports","doc","doctype","console","warn","body","testElement","createElement","classList","add","appendChild","computedStyle","getComputedStyle","display","remove","full","mixinDisabled","base","_disabled","value","args","mixinColor","defaultColor","color","_color","colorPalette","_elementRef","nativeElement","mixinDisableRipple","disableRipple","_disableRipple","mixinTabIndex","defaultTabIndex","tabIndex","_tabIndex","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","updateErrorState","oldState","parent","matcher","control","newState","isErrorState","next","mixinErrorState","_getTracker","errorStateMatcher","_tracker","_defaultErrorStateMatcher","stateChanges","mixinInitialized","_isInitialized","_pendingSubscribers","initialized","subscriber","_notifySubscriber","push","_markInitialized","Error","forEach","complete","MAT_DATE_LOCALE","MAT_DATE_LOCALE_FACTORY","DateAdapter","_localeChanges","localeChanges","getValidDateOrNull","obj","isDateInstance","isValid","deserialize","invalid","setLocale","locale","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","MAT_DATE_FORMATS","ISO_8601_REGEX","range","length","valueFunction","valuesArray","Array","i","NativeDateAdapter","matDateLocale","useUtcForDisplay","_matDateLocale","undefined","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf","Intl","DateTimeFormat","month","timeZone","_format","Date","getDateNames","day","getDayOfWeekNames","weekday","getYearName","year","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","getTime","createDate","result","today","parse","parseFormat","format","displayFormat","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","isNaN","NaN","d","setFullYear","setHours","n","slice","setUTCFullYear","setUTCHours","getHours","getMinutes","getSeconds","getMilliseconds","NativeDateAdapter_Factory","ɵprov","ɵɵdefineInjectable","token","MAT_NATIVE_DATE_FORMATS","dateInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NativeDateModule","NativeDateModule_Factory","providers","provide","useClass","MatNativeDateModule","MatNativeDateModule_Factory","provideNativeDateAdapter","formats","useValue","ShowOnDirtyErrorStateMatcher","form","dirty","submitted","ShowOnDirtyErrorStateMatcher_Factory","ErrorStateMatcher","touched","ErrorStateMatcher_Factory","MatLine","MatLine_Factory","ɵdir","ɵɵdefineDirective","selectors","hostAttrs","standalone","setLines","lines","element","prefix","changes","pipe","subscribe","setClass","className","isAdd","toggle","MatLineModule","MatLineModule_Factory","RippleState","RippleRef","_renderer","config","_animationForciblyDisabledThroughCss","state","HIDDEN","fadeOut","fadeOutRipple","passiveCapturingEventOptions$1","passive","capture","RippleEventManager","_events","Map","_delegateEventHandler","event","target","get","handlers","contains","handler","handleEvent","addHandler","ngZone","handlersForEvent","handlersForElement","set","Set","runOutsideAngular","document","addEventListener","removeHandler","delete","size","removeEventListener","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveCapturingEventOptions","pointerDownEvents","pointerUpEvents","RippleRenderer","_eventManager","_target","_ngZone","elementOrElementRef","_platform","_isPointerDown","_activeRipples","_pointerUpEventsRegistered","_containerElement","fadeInRipple","x","y","containerRect","_containerRect","getBoundingClientRect","animationConfig","animation","centered","left","width","top","height","radius","distanceToFurthestCorner","offsetX","offsetY","ripple","backgroundColor","transitionDuration","computedStyles","window","userTransitionProperty","transitionProperty","userTransitionDuration","animationForciblyDisabledThroughCss","rippleRef","transform","FADING_IN","persistent","_mostRecentTransientRipple","eventListeners","onTransitionEnd","_finishRippleTransition","onTransitionCancel","_destroyRipple","FADING_OUT","rippleEl","opacity","fadeOutAll","_getActiveRipples","fadeOutAllNonPersistent","setupTriggerEvents","_triggerElement","_removeTriggerEvents","_onMousedown","_onTouchStart","_onPointerUp","_startFadeOutTransition","isMostRecentTransientRipple","VISIBLE","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","clientX","clientY","rippleConfig","touches","changedTouches","isVisible","terminateOnPointerUp","from","keys","trigger","rect","distX","Math","abs","right","distY","bottom","sqrt","MAT_RIPPLE_GLOBAL_OPTIONS","MatRipple","_setupTriggerEventsIfEnabled","_trigger","globalOptions","_animationMode","_globalOptions","_rippleRenderer","ngOnInit","ngOnDestroy","launch","configOrX","MatRipple_Factory","ɵɵdirectiveInject","hostVars","hostBindings","MatRipple_HostBindings","ɵɵclassProp","unbounded","inputs","ɵɵInputFlags","None","exportAs","MatRippleModule","MatRippleModule_Factory","MatPseudoCheckbox","appearance","MatPseudoCheckbox_Factory","ɵcmp","ɵɵdefineComponent","MatPseudoCheckbox_HostBindings","features","ɵɵStandaloneFeature","decls","vars","template","MatPseudoCheckbox_Template","styles","encapsulation","changeDetection","MatPseudoCheckboxModule","MatPseudoCheckboxModule_Factory","MAT_OPTION_PARENT_COMPONENT","_uniqueOptgroupIdCounter","MAT_OPTGROUP","MatOptgroup","_labelId","_inert","inertGroups","MatOptgroup_Factory","MatOptgroup_HostBindings","ɵɵattribute","toString","HasDecoratorInputTransform","ɵɵProvidersFeature","useExisting","ɵɵInputTransformsFeature","ngContentSelectors","consts","MatOptgroup_Template","ɵɵprojectionDef","ɵɵprojection","_uniqueIdCounter","MatOptionSelectionChange","source","isUserInput","MatOption","multiple","_parent","_selected","hideSingleSelectionIndicator","_element","_changeDetectorRef","_active","_mostRecentViewValue","id","onSelectionChange","active","viewValue","_text","textContent","trim","select","emitEvent","markForCheck","_emitSelectionChangeEvent","deselect","focus","_origin","options","_getHostElement","setActiveStyles","setInactiveStyles","getLabel","_handleKeydown","keyCode","_selectViaInteraction","preventDefault","_getTabIndex","ngAfterViewChecked","emit","MatOption_Factory","ChangeDetectorRef","viewQuery","MatOption_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatOption_HostBindings","ɵɵlistener","MatOption_click_HostBindingHandler","MatOption_keydown_HostBindingHandler","$event","ɵɵhostProperty","outputs","MatOption_Template","ɵɵtemplate","ɵɵconditional","dependencies","_countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","_getOptionScrollPosition","optionOffset","optionHeight","currentScrollPosition","panelHeight","MatOptionModule","MatOptionModule_Factory","eventListenerOptions","rippleInteractionEvents","matRippleUninitialized","matRippleClassName","matRippleCentered","matRippleDisabled","MatRippleLoader","_globalRippleOptions","_hosts","_onInteraction","HTMLElement","eventTarget","closest","_createRipple","hosts","host","destroyRipple","configureRipple","setAttribute","hasAttribute","getRipple","setDisabled","removeAttribute","existingRipple","querySelector","getAttribute","append","attachRipple","MatRippleLoader_Factory","_MatInternalFormField","_MatInternalFormField_Factory","_MatInternalFormField_HostBindings","labelPosition","attrs","_MatInternalFormField_Template"],"sources":["C:/Users/krava/OneDrive/Desktop/angular_cards/node_modules/@angular/material/fesm2022/core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Version, InjectionToken, inject, NgModule, Optional, Inject, LOCALE_ID, Injectable, Directive, ANIMATION_MODULE_TYPE, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, booleanAttribute, EventEmitter, Output, ViewChild, NgZone, ElementRef } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$1 } from '@angular/cdk';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { Platform, _isTestEnvironment, normalizePassiveListenerOptions, _getEventTarget } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/** Current version of Angular Material. */\nconst VERSION = new Version('17.3.10');\n\n/** @docs-private */\nclass AnimationCurves {\n    static { this.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)'; }\n    static { this.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)'; }\n    static { this.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)'; }\n    static { this.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)'; }\n}\n/** @docs-private */\nclass AnimationDurations {\n    static { this.COMPLEX = '375ms'; }\n    static { this.ENTERING = '225ms'; }\n    static { this.EXITING = '195ms'; }\n}\n\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n    return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nclass MatCommonModule {\n    constructor(highContrastModeDetector, _sanityChecks, _document) {\n        this._sanityChecks = _sanityChecks;\n        this._document = _document;\n        /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n        this._hasDoneGlobalChecks = false;\n        // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n        // in MatCommonModule.\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n        if (!this._hasDoneGlobalChecks) {\n            this._hasDoneGlobalChecks = true;\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                // Inject in here so the reference to `Platform` can be removed in production mode.\n                const platform = inject(Platform, { optional: true });\n                if (this._checkIsEnabled('doctype')) {\n                    _checkDoctypeIsDefined(this._document);\n                }\n                if (this._checkIsEnabled('theme')) {\n                    _checkThemeIsPresent(this._document, !!platform?.isBrowser);\n                }\n                if (this._checkIsEnabled('version')) {\n                    _checkCdkVersionMatch();\n                }\n            }\n        }\n    }\n    /** Gets whether a specific sanity check is enabled. */\n    _checkIsEnabled(name) {\n        if (_isTestEnvironment()) {\n            return false;\n        }\n        if (typeof this._sanityChecks === 'boolean') {\n            return this._sanityChecks;\n        }\n        return !!this._sanityChecks[name];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCommonModule, deps: [{ token: i1.HighContrastModeDetector }, { token: MATERIAL_SANITY_CHECKS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCommonModule, imports: [BidiModule], exports: [BidiModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCommonModule, imports: [BidiModule, BidiModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule],\n                    exports: [BidiModule],\n                }]\n        }], ctorParameters: () => [{ type: i1.HighContrastModeDetector }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MATERIAL_SANITY_CHECKS]\n                }] }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc) {\n    if (!doc.doctype) {\n        console.warn('Current document does not have a doctype. This may cause ' +\n            'some Angular Material components not to behave as expected.');\n    }\n}\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc, isBrowser) {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!doc.body || !isBrowser) {\n        return;\n    }\n    const testElement = doc.createElement('div');\n    testElement.classList.add('mat-theme-loaded-marker');\n    doc.body.appendChild(testElement);\n    const computedStyle = getComputedStyle(testElement);\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n        console.warn('Could not find Angular Material core theme. Most Material ' +\n            'components may not work as expected. For more info refer ' +\n            'to the theming guide: https://material.angular.io/guide/theming');\n    }\n    testElement.remove();\n}\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch() {\n    if (VERSION.full !== VERSION$1.full) {\n        console.warn('The Angular Material version (' +\n            VERSION.full +\n            ') does not match ' +\n            'the Angular CDK version (' +\n            VERSION$1.full +\n            ').\\n' +\n            'Please ensure the versions of these two packages exactly match.');\n    }\n}\n\nfunction mixinDisabled(base) {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n        constructor(...args) {\n            super(...args);\n            this._disabled = false;\n        }\n    };\n}\n\nfunction mixinColor(base, defaultColor) {\n    return class extends base {\n        get color() {\n            return this._color;\n        }\n        set color(value) {\n            const colorPalette = value || this.defaultColor;\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n                }\n                this._color = colorPalette;\n            }\n        }\n        constructor(...args) {\n            super(...args);\n            this.defaultColor = defaultColor;\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\nfunction mixinDisableRipple(base) {\n    return class extends base {\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() {\n            return this._disableRipple;\n        }\n        set disableRipple(value) {\n            this._disableRipple = coerceBooleanProperty(value);\n        }\n        constructor(...args) {\n            super(...args);\n            this._disableRipple = false;\n        }\n    };\n}\n\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n    return class extends base {\n        get tabIndex() {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n        }\n        constructor(...args) {\n            super(...args);\n            this._tabIndex = defaultTabIndex;\n            this.defaultTabIndex = defaultTabIndex;\n        }\n    };\n}\n\n/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n        /** Whether the tracker is currently in an error state. */\n        this.errorState = false;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\nfunction mixinErrorState(base) {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        get errorState() {\n            return this._getTracker().errorState;\n        }\n        set errorState(value) {\n            this._getTracker().errorState = value;\n        }\n        /** An object used to control the error state of the component. */\n        get errorStateMatcher() {\n            return this._getTracker().matcher;\n        }\n        set errorStateMatcher(value) {\n            this._getTracker().matcher = value;\n        }\n        /** Updates the error state based on the provided error state matcher. */\n        updateErrorState() {\n            this._getTracker().updateErrorState();\n        }\n        _getTracker() {\n            if (!this._tracker) {\n                this._tracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, this.ngControl, this._parentFormGroup, this._parentForm, this.stateChanges);\n            }\n            return this._tracker;\n        }\n        constructor(...args) {\n            super(...args);\n        }\n    };\n}\n\n/**\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\n * @deprecated Track the initialized state manually.\n * @breaking-change 19.0.0\n */\nfunction mixinInitialized(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether this directive has been marked as initialized. */\n            this._isInitialized = false;\n            /**\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\n             * not expect to be populated after.\n             */\n            this._pendingSubscribers = [];\n            /**\n             * Observable stream that emits when the directive initializes. If already initialized, the\n             * subscriber is stored to be notified once _markInitialized is called.\n             */\n            this.initialized = new Observable(subscriber => {\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n                // when _markInitialized is called.\n                if (this._isInitialized) {\n                    this._notifySubscriber(subscriber);\n                }\n                else {\n                    this._pendingSubscribers.push(subscriber);\n                }\n            });\n        }\n        /**\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n         * of ngOnInit.\n         * @docs-private\n         */\n        _markInitialized() {\n            if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('This directive has already been marked as initialized and ' +\n                    'should not be called twice.');\n            }\n            this._isInitialized = true;\n            this._pendingSubscribers.forEach(this._notifySubscriber);\n            this._pendingSubscribers = null;\n        }\n        /** Emits and completes the subscriber stream (should only emit once). */\n        _notifySubscriber(subscriber) {\n            subscriber.next();\n            subscriber.complete();\n        }\n    };\n}\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n        /** A stream that emits when the locale changes. */\n        this.localeChanges = this._localeChanges;\n    }\n    /**\n     * Given a potential date object, returns that same date object if it is\n     * a valid date, or `null` if it's not a valid date.\n     * @param obj The object to check.\n     * @returns A date or `null`.\n     */\n    getValidDateOrNull(obj) {\n        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n    }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return (this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second));\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n    constructor(\n    /**\n     * @deprecated Now injected via inject(), param to be removed.\n     * @breaking-change 18.0.0\n     */\n    matDateLocale) {\n        super();\n        /**\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 14.0.0\n         */\n        this.useUtcForDisplay = false;\n        /** The injected locale. */\n        this._matDateLocale = inject(MAT_DATE_LOCALE, { optional: true });\n        if (matDateLocale !== undefined) {\n            this._matDateLocale = matDateLocale;\n        }\n        super.setLocale(this._matDateLocale);\n    }\n    getYear(date) {\n        return date.getFullYear();\n    }\n    getMonth(date) {\n        return date.getMonth();\n    }\n    getDate(date) {\n        return date.getDate();\n    }\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    getMonthNames(style) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n        return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n    }\n    getDateNames() {\n        const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n        return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getDayOfWeekNames(style) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n        return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getYearName(date) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n        return this._format(dtf, date);\n    }\n    getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    }\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Check for invalid month and date (except upper bound on date which we have to check after\n            // creating the Date).\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        let result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return new Date();\n    }\n    parse(value, parseFormat) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        const dtf = new Intl.DateTimeFormat(this.locale, { ...displayFormat, timeZone: 'utc' });\n        return this._format(dtf, date);\n    }\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate()),\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    invalid() {\n        return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setFullYear` and `setHours` instead.\n        const d = new Date();\n        d.setFullYear(year, month, date);\n        d.setHours(0, 0, 0, 0);\n        return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n        const d = new Date();\n        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return dtf.format(d);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateAdapter }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DATE_LOCALE]\n                }] }] });\n\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    },\n};\n\nclass NativeDateModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateModule, providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }],\n                }]\n        }] });\nclass MatNativeDateModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNativeDateModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNativeDateModule, providers: [provideNativeDateAdapter()] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [provideNativeDateAdapter()],\n                }]\n        }] });\nfunction provideNativeDateAdapter(formats = MAT_NATIVE_DATE_FORMATS) {\n    return [\n        { provide: DateAdapter, useClass: NativeDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: formats },\n    ];\n}\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatLine, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatLine, isStandalone: true, selector: \"[mat-line], [matLine]\", host: { classAttribute: \"mat-line\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatLine, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-line], [matLine]',\n                    host: { 'class': 'mat-line' },\n                    standalone: true,\n                }]\n        }] });\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    element.nativeElement.classList.toggle(className, isAdd);\n}\nclass MatLineModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatLineModule, imports: [MatCommonModule, MatLine], exports: [MatLine, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatLineModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatLineModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatLine],\n                    exports: [MatLine, MatCommonModule],\n                }]\n        }] });\n\n/** Possible states for a ripple element. */\nvar RippleState;\n(function (RippleState) {\n    RippleState[RippleState[\"FADING_IN\"] = 0] = \"FADING_IN\";\n    RippleState[RippleState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n    RippleState[RippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n    RippleState[RippleState[\"HIDDEN\"] = 3] = \"HIDDEN\";\n})(RippleState || (RippleState = {}));\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    constructor(_renderer, \n    /** Reference to the ripple HTML element. */\n    element, \n    /** Ripple configuration used for the ripple. */\n    config, \n    /* Whether animations are forcibly disabled for ripples through CSS. */\n    _animationForciblyDisabledThroughCss = false) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        this._animationForciblyDisabledThroughCss = _animationForciblyDisabledThroughCss;\n        /** Current state of the ripple. */\n        this.state = RippleState.HIDDEN;\n    }\n    /** Fades out the ripple element. */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nclass RippleEventManager {\n    constructor() {\n        this._events = new Map();\n        /** Event handler that is bound and which dispatches the events to the different targets. */\n        this._delegateEventHandler = (event) => {\n            const target = _getEventTarget(event);\n            if (target) {\n                this._events.get(event.type)?.forEach((handlers, element) => {\n                    if (element === target || element.contains(target)) {\n                        handlers.forEach(handler => handler.handleEvent(event));\n                    }\n                });\n            }\n        };\n    }\n    /** Adds an event handler. */\n    addHandler(ngZone, name, element, handler) {\n        const handlersForEvent = this._events.get(name);\n        if (handlersForEvent) {\n            const handlersForElement = handlersForEvent.get(element);\n            if (handlersForElement) {\n                handlersForElement.add(handler);\n            }\n            else {\n                handlersForEvent.set(element, new Set([handler]));\n            }\n        }\n        else {\n            this._events.set(name, new Map([[element, new Set([handler])]]));\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n            });\n        }\n    }\n    /** Removes an event handler. */\n    removeHandler(name, element, handler) {\n        const handlersForEvent = this._events.get(name);\n        if (!handlersForEvent) {\n            return;\n        }\n        const handlersForElement = handlersForEvent.get(element);\n        if (!handlersForElement) {\n            return;\n        }\n        handlersForElement.delete(handler);\n        if (handlersForElement.size === 0) {\n            handlersForEvent.delete(element);\n        }\n        if (handlersForEvent.size === 0) {\n            this._events.delete(name);\n            document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n        }\n    }\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 225,\n    exitDuration: 150,\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n    static { this._eventManager = new RippleEventManager(); }\n    constructor(_target, _ngZone, elementOrElementRef, _platform) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Whether the pointer is currently down or not. */\n        this._isPointerDown = false;\n        /**\n         * Map of currently active ripple references.\n         * The ripple reference is mapped to its element event listeners.\n         * The reason why `| null` is used is that event listeners are added only\n         * when the condition is truthy (see the `_startFadeOutTransition` method).\n         */\n        this._activeRipples = new Map();\n        /** Whether pointer-up event listeners have been registered. */\n        this._pointerUpEventsRegistered = false;\n        // Only do anything if we're on the browser.\n        if (_platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x, y, config = {}) {\n        const containerRect = (this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect());\n        const animationConfig = { ...defaultRippleAnimationConfig, ...config.animation };\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        const offsetX = x - containerRect.left;\n        const offsetY = y - containerRect.top;\n        const enterDuration = animationConfig.enterDuration;\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If a custom color has been specified, set it as inline style. If no color is\n        // set, the default color will be applied through the ripple theme styles.\n        if (config.color != null) {\n            ripple.style.backgroundColor = config.color;\n        }\n        ripple.style.transitionDuration = `${enterDuration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical to ensure that the `scale` animates properly.\n        // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n        // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n        const computedStyles = window.getComputedStyle(ripple);\n        const userTransitionProperty = computedStyles.transitionProperty;\n        const userTransitionDuration = computedStyles.transitionDuration;\n        // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n        // `transition: none` or `display: none`). This is technically unexpected since animations are\n        // controlled through the animation config, but this exists for backwards compatibility. This\n        // logic does not need to be super accurate since it covers some edge cases which can be easily\n        // avoided by users.\n        const animationForciblyDisabledThroughCss = userTransitionProperty === 'none' ||\n            // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n            // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n            userTransitionDuration === '0s' ||\n            userTransitionDuration === '0s, 0s' ||\n            // If the container is 0x0, it's likely `display: none`.\n            (containerRect.width === 0 && containerRect.height === 0);\n        // Exposed reference to the ripple that will be returned.\n        const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n        // Start the enter animation by setting the transform/scale to 100%. The animation will\n        // execute as part of this statement because we forced a style recalculation before.\n        // Note: We use a 3d transform here in order to avoid an issue in Safari where\n        // the ripples aren't clipped when inside the shadow DOM (see #24028).\n        ripple.style.transform = 'scale3d(1, 1, 1)';\n        rippleRef.state = RippleState.FADING_IN;\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        let eventListeners = null;\n        // Do not register the `transition` event listener if fade-in and fade-out duration\n        // are set to zero. The events won't fire anyway and we can save resources here.\n        if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n            this._ngZone.runOutsideAngular(() => {\n                const onTransitionEnd = () => this._finishRippleTransition(rippleRef);\n                const onTransitionCancel = () => this._destroyRipple(rippleRef);\n                ripple.addEventListener('transitionend', onTransitionEnd);\n                // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n                // directly as otherwise we would keep it part of the ripple container forever.\n                // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n                ripple.addEventListener('transitioncancel', onTransitionCancel);\n                eventListeners = { onTransitionEnd, onTransitionCancel };\n            });\n        }\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.set(rippleRef, eventListeners);\n        // In case there is no fade-in transition duration, we need to manually call the transition\n        // end listener because `transitionend` doesn't fire if there is no transition.\n        if (animationForciblyDisabledThroughCss || !enterDuration) {\n            this._finishRippleTransition(rippleRef);\n        }\n        return rippleRef;\n    }\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef) {\n        // For ripples already fading out or hidden, this should be a noop.\n        if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n            return;\n        }\n        const rippleEl = rippleRef.element;\n        const animationConfig = { ...defaultRippleAnimationConfig, ...rippleRef.config.animation };\n        // This starts the fade-out transition and will fire the transition end listener that\n        // removes the ripple element from the DOM.\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = RippleState.FADING_OUT;\n        // In case there is no fade-out transition duration, we need to manually call the\n        // transition end listener because `transitionend` doesn't fire if there is no transition.\n        if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n            this._finishRippleTransition(rippleRef);\n        }\n    }\n    /** Fades out all currently active ripples. */\n    fadeOutAll() {\n        this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n    }\n    /** Fades out all currently active non-persistent ripples. */\n    fadeOutAllNonPersistent() {\n        this._getActiveRipples().forEach(ripple => {\n            if (!ripple.config.persistent) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(elementOrElementRef) {\n        const element = coerceElement(elementOrElementRef);\n        if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._triggerElement = element;\n        // Use event delegation for the trigger events since they're\n        // set up during creation and are performance-sensitive.\n        pointerDownEvents.forEach(type => {\n            RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n        });\n    }\n    /**\n     * Handles all registered events.\n     * @docs-private\n     */\n    handleEvent(event) {\n        if (event.type === 'mousedown') {\n            this._onMousedown(event);\n        }\n        else if (event.type === 'touchstart') {\n            this._onTouchStart(event);\n        }\n        else {\n            this._onPointerUp();\n        }\n        // If pointer-up events haven't been registered yet, do so now.\n        // We do this on-demand in order to reduce the total number of event listeners\n        // registered by the ripples, which speeds up the rendering time for large UIs.\n        if (!this._pointerUpEventsRegistered) {\n            // The events for hiding the ripple are bound directly on the trigger, because:\n            // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n            // delegation will be diminished by having to look through all the data structures often.\n            // 2. They aren't as performance-sensitive, because they're bound only after the user\n            // has interacted with an element.\n            this._ngZone.runOutsideAngular(() => {\n                pointerUpEvents.forEach(type => {\n                    this._triggerElement.addEventListener(type, this, passiveCapturingEventOptions);\n                });\n            });\n            this._pointerUpEventsRegistered = true;\n        }\n    }\n    /** Method that will be called if the fade-in or fade-in transition completed. */\n    _finishRippleTransition(rippleRef) {\n        if (rippleRef.state === RippleState.FADING_IN) {\n            this._startFadeOutTransition(rippleRef);\n        }\n        else if (rippleRef.state === RippleState.FADING_OUT) {\n            this._destroyRipple(rippleRef);\n        }\n    }\n    /**\n     * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n     * is not held down anymore.\n     */\n    _startFadeOutTransition(rippleRef) {\n        const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n        const { persistent } = rippleRef.config;\n        rippleRef.state = RippleState.VISIBLE;\n        // When the timer runs out while the user has kept their pointer down, we want to\n        // keep only the persistent ripples and the latest transient ripple. We do this,\n        // because we don't want stacked transient ripples to appear after their enter\n        // animation has finished.\n        if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n            rippleRef.fadeOut();\n        }\n    }\n    /** Destroys the given ripple by removing it from the DOM and updating its state. */\n    _destroyRipple(rippleRef) {\n        const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n        this._activeRipples.delete(rippleRef);\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // If the current ref is the most recent transient ripple, unset it\n        // avoid memory leaks.\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        rippleRef.state = RippleState.HIDDEN;\n        if (eventListeners !== null) {\n            rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n            rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n        }\n        rippleRef.element.remove();\n    }\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    _onMousedown(event) {\n        // Screen readers will fire fake mouse events for space/enter. Skip launching a\n        // ripple in this case for consistency with the non-screen-reader experience.\n        const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n        const isSyntheticEvent = this._lastTouchStartEvent &&\n            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n            this._isPointerDown = true;\n            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using touch. */\n    _onTouchStart(event) {\n        if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n            // events will launch a second ripple if we don't ignore mouse events for a specific\n            // time after a touchstart event.\n            this._lastTouchStartEvent = Date.now();\n            this._isPointerDown = true;\n            // Use `changedTouches` so we skip any touches where the user put\n            // their finger down, but used another finger to tap the element again.\n            const touches = event.changedTouches;\n            // According to the typings the touches should always be defined, but in some cases\n            // the browser appears to not assign them in tests which leads to flakes.\n            if (touches) {\n                for (let i = 0; i < touches.length; i++) {\n                    this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n                }\n            }\n        }\n    }\n    /** Function being called whenever the trigger is being released. */\n    _onPointerUp() {\n        if (!this._isPointerDown) {\n            return;\n        }\n        this._isPointerDown = false;\n        // Fade-out all ripples that are visible and not persistent.\n        this._getActiveRipples().forEach(ripple => {\n            // By default, only ripples that are completely visible will fade out on pointer release.\n            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n            const isVisible = ripple.state === RippleState.VISIBLE ||\n                (ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN);\n            if (!ripple.config.persistent && isVisible) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    _getActiveRipples() {\n        return Array.from(this._activeRipples.keys());\n    }\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents() {\n        const trigger = this._triggerElement;\n        if (trigger) {\n            pointerDownEvents.forEach(type => RippleRenderer._eventManager.removeHandler(type, trigger, this));\n            if (this._pointerUpEventsRegistered) {\n                pointerUpEvents.forEach(type => trigger.removeEventListener(type, this, passiveCapturingEventOptions));\n                this._pointerUpEventsRegistered = false;\n            }\n        }\n    }\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        if (value) {\n            this.fadeOutAllNonPersistent();\n        }\n        this._disabled = value;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() {\n        return this._trigger || this._elementRef.nativeElement;\n    }\n    set trigger(trigger) {\n        this._trigger = trigger;\n        this._setupTriggerEventsIfEnabled();\n    }\n    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n        this._elementRef = _elementRef;\n        this._animationMode = _animationMode;\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        this._disabled = false;\n        /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n        this._isInitialized = false;\n        this._globalOptions = globalOptions || {};\n        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n    }\n    /** Fades out all currently showing non-persistent ripple elements. */\n    fadeOutAllNonPersistent() {\n        this._rippleRenderer.fadeOutAllNonPersistent();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n        return {\n            centered: this.centered,\n            radius: this.radius,\n            color: this.color,\n            animation: {\n                ...this._globalOptions.animation,\n                ...(this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {}),\n                ...this.animation,\n            },\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n        };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n        return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n        if (typeof configOrX === 'number') {\n            return this._rippleRenderer.fadeInRipple(configOrX, y, { ...this.rippleConfig, ...config });\n        }\n        else {\n            return this._rippleRenderer.fadeInRipple(0, 0, { ...this.rippleConfig, ...configOrX });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRipple, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1$1.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatRipple, isStandalone: true, selector: \"[mat-ripple], [matRipple]\", inputs: { color: [\"matRippleColor\", \"color\"], unbounded: [\"matRippleUnbounded\", \"unbounded\"], centered: [\"matRippleCentered\", \"centered\"], radius: [\"matRippleRadius\", \"radius\"], animation: [\"matRippleAnimation\", \"animation\"], disabled: [\"matRippleDisabled\", \"disabled\"], trigger: [\"matRippleTrigger\", \"trigger\"] }, host: { properties: { \"class.mat-ripple-unbounded\": \"unbounded\" }, classAttribute: \"mat-ripple\" }, exportAs: [\"matRipple\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRipple, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-ripple], [matRipple]',\n                    exportAs: 'matRipple',\n                    host: {\n                        'class': 'mat-ripple',\n                        '[class.mat-ripple-unbounded]': 'unbounded',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1$1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matRippleColor']\n            }], unbounded: [{\n                type: Input,\n                args: ['matRippleUnbounded']\n            }], centered: [{\n                type: Input,\n                args: ['matRippleCentered']\n            }], radius: [{\n                type: Input,\n                args: ['matRippleRadius']\n            }], animation: [{\n                type: Input,\n                args: ['matRippleAnimation']\n            }], disabled: [{\n                type: Input,\n                args: ['matRippleDisabled']\n            }], trigger: [{\n                type: Input,\n                args: ['matRippleTrigger']\n            }] } });\n\nclass MatRippleModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleModule, imports: [MatCommonModule, MatRipple], exports: [MatRipple, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRipple],\n                    exports: [MatRipple, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n        /** Display state of the checkbox. */\n        this.state = 'unchecked';\n        /** Whether the checkbox is disabled. */\n        this.disabled = false;\n        /**\n         * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n         * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n         */\n        this.appearance = 'full';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPseudoCheckbox, deps: [{ token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatPseudoCheckbox, isStandalone: true, selector: \"mat-pseudo-checkbox\", inputs: { state: \"state\", disabled: \"disabled\", appearance: \"appearance\" }, host: { properties: { \"class.mat-pseudo-checkbox-indeterminate\": \"state === \\\"indeterminate\\\"\", \"class.mat-pseudo-checkbox-checked\": \"state === \\\"checked\\\"\", \"class.mat-pseudo-checkbox-disabled\": \"disabled\", \"class.mat-pseudo-checkbox-minimal\": \"appearance === \\\"minimal\\\"\", \"class.mat-pseudo-checkbox-full\": \"appearance === \\\"full\\\"\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\" }, classAttribute: \"mat-pseudo-checkbox\" }, ngImport: i0, template: '', isInline: true, styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color);border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color);border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPseudoCheckbox, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'mat-pseudo-checkbox', template: '', host: {\n                        'class': 'mat-pseudo-checkbox',\n                        '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                        '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                        '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                        '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n                        '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    }, standalone: true, styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color);border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color);border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { state: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }] } });\n\nclass MatPseudoCheckboxModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPseudoCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [MatCommonModule, MatPseudoCheckbox], exports: [MatPseudoCheckbox] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPseudoCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatPseudoCheckbox],\n                    exports: [MatPseudoCheckbox],\n                }]\n        }] });\n\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup {\n    constructor(parent) {\n        /** whether the option group is disabled. */\n        this.disabled = false;\n        /** Unique id for the underlying label. */\n        this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n        this._inert = parent?.inertGroups ?? false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOptgroup, deps: [{ token: MAT_OPTION_PARENT_COMPONENT, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatOptgroup, isStandalone: true, selector: \"mat-optgroup\", inputs: { label: \"label\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, host: { properties: { \"attr.role\": \"_inert ? null : \\\"group\\\"\", \"attr.aria-disabled\": \"_inert ? null : disabled.toString()\", \"attr.aria-labelledby\": \"_inert ? null : _labelId\" }, classAttribute: \"mat-mdc-optgroup\" }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], exportAs: [\"matOptgroup\"], ngImport: i0, template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color);font-family:var(--mat-optgroup-label-text-font);line-height:var(--mat-optgroup-label-text-line-height);font-size:var(--mat-optgroup-label-text-size);letter-spacing:var(--mat-optgroup-label-text-tracking);font-weight:var(--mat-optgroup-label-text-weight)}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;min-height:48px}.mat-mdc-optgroup-label:focus{outline:none}[dir=rtl] .mat-mdc-optgroup-label,.mat-mdc-optgroup-label[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOptgroup, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-optgroup', exportAs: 'matOptgroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-optgroup',\n                        '[attr.role]': '_inert ? null : \"group\"',\n                        '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n                        '[attr.aria-labelledby]': '_inert ? null : _labelId',\n                    }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], standalone: true, template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color);font-family:var(--mat-optgroup-label-text-font);line-height:var(--mat-optgroup-label-text-line-height);font-size:var(--mat-optgroup-label-text-size);letter-spacing:var(--mat-optgroup-label-text-tracking);font-weight:var(--mat-optgroup-label-text-weight)}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;min-height:48px}.mat-mdc-optgroup-label:focus{outline:none}[dir=rtl] .mat-mdc-optgroup-label,.mat-mdc-optgroup-label[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal}\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_OPTION_PARENT_COMPONENT]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { label: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n    /** Whether or not the option is currently selected. */\n    get selected() {\n        return this._selected;\n    }\n    /** Whether the option is disabled. */\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n    }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return !!(this._parent && this._parent.disableRipple);\n    }\n    /** Whether to display checkmark for single-selection. */\n    get hideSingleSelectionIndicator() {\n        return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n    }\n    constructor(_element, _changeDetectorRef, _parent, group) {\n        this._element = _element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parent = _parent;\n        this.group = group;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._mostRecentViewValue = '';\n        /** The unique ID of the option. */\n        this.id = `mat-option-${_uniqueIdCounter++}`;\n        /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSelectionChange = new EventEmitter();\n        /** Emits when the state of the option changes and any parents have to be notified. */\n        this._stateChanges = new Subject();\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._text?.nativeElement.textContent || '').trim();\n    }\n    /** Selects the option. */\n    select(emitEvent = true) {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            if (emitEvent) {\n                this._emitSelectionChangeEvent();\n            }\n        }\n    }\n    /** Deselects the option. */\n    deselect(emitEvent = true) {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            if (emitEvent) {\n                this._emitSelectionChangeEvent();\n            }\n        }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n    // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n    // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                if (this._mostRecentViewValue) {\n                    this._stateChanges.next();\n                }\n                this._mostRecentViewValue = viewValue;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOption, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MAT_OPTION_PARENT_COMPONENT, optional: true }, { token: MAT_OPTGROUP, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatOption, isStandalone: true, selector: \"mat-option\", inputs: { value: \"value\", id: \"id\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { onSelectionChange: \"onSelectionChange\" }, host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_selectViaInteraction()\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"class.mdc-list-item--selected\": \"selected\", \"class.mat-mdc-option-multiple\": \"multiple\", \"class.mat-mdc-option-active\": \"active\", \"class.mdc-list-item--disabled\": \"disabled\", \"id\": \"id\", \"attr.aria-selected\": \"selected\", \"attr.aria-disabled\": \"disabled.toString()\" }, classAttribute: \"mat-mdc-option mdc-list-item\" }, viewQueries: [{ propertyName: \"_text\", first: true, predicate: [\"text\"], descendants: true, static: true }], exportAs: [\"matOption\"], ngImport: i0, template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-mdc-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-mdc-option{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color);font-family:var(--mat-option-label-text-font);line-height:var(--mat-option-label-text-line-height);font-size:var(--mat-option-label-text-size);letter-spacing:var(--mat-option-label-text-tracking);font-weight:var(--mat-option-label-text-weight);min-height:48px}.mat-mdc-option:focus{outline:none}[dir=rtl] .mat-mdc-option,.mat-mdc-option[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color)}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color)}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}.cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{right:auto;left:16px}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"], dependencies: [{ kind: \"component\", type: MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: [\"state\", \"disabled\", \"appearance\"] }, { kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOption, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-option', exportAs: 'matOption', host: {\n                        'role': 'option',\n                        '[class.mdc-list-item--selected]': 'selected',\n                        '[class.mat-mdc-option-multiple]': 'multiple',\n                        '[class.mat-mdc-option-active]': 'active',\n                        '[class.mdc-list-item--disabled]': 'disabled',\n                        '[id]': 'id',\n                        // Set aria-selected to false for non-selected items and true for selected items. Conform to\n                        // [WAI ARIA Listbox authoring practices guide](\n                        //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n                        // selected option has either aria-selected or aria-checked  set to true. All options that are\n                        // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n                        // aria-selected implementation of Chips and List components.\n                        //\n                        // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n                        // every option as \"selected\" (#21491).\n                        '[attr.aria-selected]': 'selected',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '(click)': '_selectViaInteraction()',\n                        '(keydown)': '_handleKeydown($event)',\n                        'class': 'mat-mdc-option mdc-list-item',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [MatPseudoCheckbox, MatRipple], template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-mdc-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-mdc-option{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color);font-family:var(--mat-option-label-text-font);line-height:var(--mat-option-label-text-line-height);font-size:var(--mat-option-label-text-size);letter-spacing:var(--mat-option-label-text-tracking);font-weight:var(--mat-option-label-text-weight);min-height:48px}.mat-mdc-option:focus{outline:none}[dir=rtl] .mat-mdc-option,.mat-mdc-option[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color)}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color)}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}.cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{right:auto;left:16px}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_OPTION_PARENT_COMPONENT]\n                }] }, { type: MatOptgroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_OPTGROUP]\n                }] }], propDecorators: { value: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onSelectionChange: [{\n                type: Output\n            }], _text: [{\n                type: ViewChild,\n                args: ['text', { static: true }]\n            }] } });\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\nclass MatOptionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOptionModule, imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup], exports: [MatOption, MatOptgroup] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOptionModule, imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatOptionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup],\n                    exports: [MatOption, MatOptgroup],\n                }]\n        }] });\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = { capture: true };\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n *\n * @docs-private\n */\nclass MatRippleLoader {\n    constructor() {\n        this._document = inject(DOCUMENT, { optional: true });\n        this._animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n        this._globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, { optional: true });\n        this._platform = inject(Platform);\n        this._ngZone = inject(NgZone);\n        this._hosts = new Map();\n        /** Handles creating and attaching component internals when a component it is initially interacted with. */\n        this._onInteraction = (event) => {\n            if (!(event.target instanceof HTMLElement)) {\n                return;\n            }\n            const eventTarget = event.target;\n            // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n            const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n            if (element) {\n                this._createRipple(element);\n            }\n        };\n        this._ngZone.runOutsideAngular(() => {\n            for (const event of rippleInteractionEvents) {\n                this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n            }\n        });\n    }\n    ngOnDestroy() {\n        const hosts = this._hosts.keys();\n        for (const host of hosts) {\n            this.destroyRipple(host);\n        }\n        for (const event of rippleInteractionEvents) {\n            this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n        }\n    }\n    /**\n     * Configures the ripple that will be rendered by the ripple loader.\n     *\n     * Stores the given information about how the ripple should be configured on the host\n     * element so that it can later be retrived & used when the ripple is actually created.\n     */\n    configureRipple(host, config) {\n        // Indicates that the ripple has not yet been rendered for this component.\n        host.setAttribute(matRippleUninitialized, '');\n        // Store the additional class name(s) that should be added to the ripple element.\n        if (config.className || !host.hasAttribute(matRippleClassName)) {\n            host.setAttribute(matRippleClassName, config.className || '');\n        }\n        // Store whether the ripple should be centered.\n        if (config.centered) {\n            host.setAttribute(matRippleCentered, '');\n        }\n        if (config.disabled) {\n            host.setAttribute(matRippleDisabled, '');\n        }\n    }\n    /** Returns the ripple instance for the given host element. */\n    getRipple(host) {\n        const ripple = this._hosts.get(host);\n        return ripple || this._createRipple(host);\n    }\n    /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n    setDisabled(host, disabled) {\n        const ripple = this._hosts.get(host);\n        // If the ripple has already been instantiated, just disable it.\n        if (ripple) {\n            ripple.disabled = disabled;\n            return;\n        }\n        // Otherwise, set an attribute so we know what the\n        // disabled state should be when the ripple is initialized.\n        if (disabled) {\n            host.setAttribute(matRippleDisabled, '');\n        }\n        else {\n            host.removeAttribute(matRippleDisabled);\n        }\n    }\n    /** Creates a MatRipple and appends it to the given element. */\n    _createRipple(host) {\n        if (!this._document) {\n            return;\n        }\n        const existingRipple = this._hosts.get(host);\n        if (existingRipple) {\n            return existingRipple;\n        }\n        // Create the ripple element.\n        host.querySelector('.mat-ripple')?.remove();\n        const rippleEl = this._document.createElement('span');\n        rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName));\n        host.append(rippleEl);\n        // Create the MatRipple.\n        const ripple = new MatRipple(new ElementRef(rippleEl), this._ngZone, this._platform, this._globalRippleOptions ? this._globalRippleOptions : undefined, this._animationMode ? this._animationMode : undefined);\n        ripple._isInitialized = true;\n        ripple.trigger = host;\n        ripple.centered = host.hasAttribute(matRippleCentered);\n        ripple.disabled = host.hasAttribute(matRippleDisabled);\n        this.attachRipple(host, ripple);\n        return ripple;\n    }\n    attachRipple(host, ripple) {\n        host.removeAttribute(matRippleUninitialized);\n        this._hosts.set(host, ripple);\n    }\n    destroyRipple(host) {\n        const ripple = this._hosts.get(host);\n        if (ripple) {\n            // Since this directive is created manually, it needs to be destroyed manually too.\n            // tslint:disable-next-line:no-lifecycle-invocation\n            ripple.ngOnDestroy();\n            this._hosts.delete(host);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleLoader, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRippleLoader, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Internal shared component used as a container in form field controls.\n * Not to be confused with `mat-form-field` which MDC calls a \"text field\".\n * @docs-private\n */\nclass _MatInternalFormField {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatInternalFormField, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatInternalFormField, isStandalone: true, selector: \"div[mat-internal-form-field]\", inputs: { labelPosition: \"labelPosition\" }, host: { properties: { \"class.mdc-form-field--align-end\": \"labelPosition === \\\"before\\\"\" }, classAttribute: \"mdc-form-field mat-internal-form-field\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field[hidden]{display:none}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mdc-form-field{font-family:var(--mdc-form-field-label-text-font);line-height:var(--mdc-form-field-label-text-line-height);font-size:var(--mdc-form-field-label-text-size);font-weight:var(--mdc-form-field-label-text-weight);letter-spacing:var(--mdc-form-field-label-text-tracking);color:var(--mdc-form-field-label-text-color)}.mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatInternalFormField, decorators: [{\n            type: Component,\n            args: [{ selector: 'div[mat-internal-form-field]', standalone: true, template: '<ng-content></ng-content>', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mdc-form-field mat-internal-form-field',\n                        '[class.mdc-form-field--align-end]': 'labelPosition === \"before\"',\n                    }, styles: [\".mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field[hidden]{display:none}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mdc-form-field{font-family:var(--mdc-form-field-label-text-font);line-height:var(--mdc-form-field-label-text-line-height);font-size:var(--mdc-form-field-label-text-size);font-weight:var(--mdc-form-field-label-text-weight);letter-spacing:var(--mdc-form-field-label-text-tracking);color:var(--mdc-form-field-label-text-color)}.mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}\"] }]\n        }], propDecorators: { labelPosition: [{\n                type: Input,\n                args: [{ required: true }]\n            }] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleLoader, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, RippleState, ShowOnDirtyErrorStateMatcher, VERSION, _ErrorStateTracker, _MatInternalFormField, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, provideNativeDateAdapter, setLines };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,OAAO,EAAEC,cAAc,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,SAAS,EAAEC,qBAAqB,EAAEC,KAAK,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AACzR,OAAO,KAAKC,EAAE,MAAM,mBAAmB;AACvC,SAASC,+BAA+B,EAAEC,gCAAgC,QAAQ,mBAAmB;AACrG,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,OAAO,IAAIC,SAAS,QAAQ,cAAc;AACnD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAO,KAAKC,IAAI,MAAM,uBAAuB;AAC7C,SAASC,QAAQ,EAAEC,kBAAkB,EAAEC,+BAA+B,EAAEC,eAAe,QAAQ,uBAAuB;AACtH,SAASC,qBAAqB,EAAEC,oBAAoB,EAAEC,aAAa,QAAQ,uBAAuB;AAClG,SAASC,UAAU,EAAEC,OAAO,QAAQ,MAAM;AAC1C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,KAAK,EAAEC,KAAK,EAAEC,cAAc,QAAQ,uBAAuB;;AAEpE;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,SAAAC,iCAAAC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAoEoGhD,EAAE,CAAAkD,SAAA,4BAyiDk6C,CAAC;EAAA;EAAA,IAAAF,EAAA;IAAA,MAAAG,MAAA,GAziDr6CnD,EAAE,CAAAoD,aAAA;IAAFpD,EAAE,CAAAqD,UAAA,aAAAF,MAAA,CAAAG,QAyiDqzC,CAAC,UAAAH,MAAA,CAAAI,QAAA,0BAAuD,CAAC;EAAA;AAAA;AAAA,SAAAC,iCAAAR,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAziDh3ChD,EAAE,CAAAkD,SAAA,4BAyiDu4D,CAAC;EAAA;EAAA,IAAAF,EAAA;IAAA,MAAAG,MAAA,GAziD14DnD,EAAE,CAAAoD,aAAA;IAAFpD,EAAE,CAAAqD,UAAA,aAAAF,MAAA,CAAAG,QAyiDuxD,CAAC;EAAA;AAAA;AAAA,SAAAG,iCAAAT,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IAziD1xDhD,EAAE,CAAA0D,cAAA,aAyiDkiE,CAAC;IAziDriE1D,EAAE,CAAA2D,MAAA,EAyiDqjE,CAAC;IAziDxjE3D,EAAE,CAAA4D,YAAA,CAyiD4jE,CAAC;EAAA;EAAA,IAAAZ,EAAA;IAAA,MAAAG,MAAA,GAziD/jEnD,EAAE,CAAAoD,aAAA;IAAFpD,EAAE,CAAA6D,SAAA,CAyiDqjE,CAAC;IAziDxjE7D,EAAE,CAAA8D,kBAAA,MAAAX,MAAA,CAAAY,KAAA,CAAAC,KAAA,KAyiDqjE,CAAC;EAAA;AAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AA5mD5pE,MAAMzC,OAAO,gBAAG,IAAIxB,OAAO,CAAC,SAAS,CAAC;;AAEtC;AAAA,IACMkE,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClB;MAAS,IAAI,CAACC,cAAc,GAAG,6BAA6B;IAAE;IAC9D;MAAS,IAAI,CAACC,kBAAkB,GAAG,6BAA6B;IAAE;IAClE;MAAS,IAAI,CAACC,kBAAkB,GAAG,2BAA2B;IAAE;IAChE;MAAS,IAAI,CAACC,WAAW,GAAG,6BAA6B;IAAE;EAC/D;EAAC,OALKJ,eAAe;AAAA;AAMrB;AAAA,IACMK,kBAAkB;EAAxB,MAAMA,kBAAkB,CAAC;IACrB;MAAS,IAAI,CAACC,OAAO,GAAG,OAAO;IAAE;IACjC;MAAS,IAAI,CAACC,QAAQ,GAAG,OAAO;IAAE;IAClC;MAAS,IAAI,CAACC,OAAO,GAAG,OAAO;IAAE;EACrC;EAAC,OAJKH,kBAAkB;AAAA;AAMxB;AACA,SAASI,8BAA8BA,CAAA,EAAG;EACtC,OAAO,IAAI;AACf;AACA;AACA,MAAMC,sBAAsB,gBAAG,IAAI3E,cAAc,CAAC,mBAAmB,EAAE;EACnE4E,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEH;AACb,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AALA,IAMMI,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClBC,WAAWA,CAACC,wBAAwB,EAAEC,aAAa,EAAEC,SAAS,EAAE;MAC5D,IAAI,CAACD,aAAa,GAAGA,aAAa;MAClC,IAAI,CAACC,SAAS,GAAGA,SAAS;MAC1B;MACA,IAAI,CAACC,oBAAoB,GAAG,KAAK;MACjC;MACA;MACAH,wBAAwB,CAACI,oCAAoC,CAAC,CAAC;MAC/D,IAAI,CAAC,IAAI,CAACD,oBAAoB,EAAE;QAC5B,IAAI,CAACA,oBAAoB,GAAG,IAAI;QAChC,IAAI,OAAOE,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;UAC/C;UACA,MAAMC,QAAQ,GAAGrF,MAAM,CAAC0B,QAAQ,EAAE;YAAE4D,QAAQ,EAAE;UAAK,CAAC,CAAC;UACrD,IAAI,IAAI,CAACC,eAAe,CAAC,SAAS,CAAC,EAAE;YACjCC,sBAAsB,CAAC,IAAI,CAACP,SAAS,CAAC;UAC1C;UACA,IAAI,IAAI,CAACM,eAAe,CAAC,OAAO,CAAC,EAAE;YAC/BE,oBAAoB,CAAC,IAAI,CAACR,SAAS,EAAE,CAAC,CAACI,QAAQ,EAAEK,SAAS,CAAC;UAC/D;UACA,IAAI,IAAI,CAACH,eAAe,CAAC,SAAS,CAAC,EAAE;YACjCI,qBAAqB,CAAC,CAAC;UAC3B;QACJ;MACJ;IACJ;IACA;IACAJ,eAAeA,CAACK,IAAI,EAAE;MAClB,IAAIjE,kBAAkB,CAAC,CAAC,EAAE;QACtB,OAAO,KAAK;MAChB;MACA,IAAI,OAAO,IAAI,CAACqD,aAAa,KAAK,SAAS,EAAE;QACzC,OAAO,IAAI,CAACA,aAAa;MAC7B;MACA,OAAO,CAAC,CAAC,IAAI,CAACA,aAAa,CAACY,IAAI,CAAC;IACrC;IACA;MAAS,IAAI,CAACC,IAAI,YAAAC,wBAAAC,CAAA;QAAA,YAAAA,CAAA,IAAwFlB,eAAe,EAAzBhF,EAAE,CAAAmG,QAAA,CAAyC9E,EAAE,CAAC+E,wBAAwB,GAAtEpG,EAAE,CAAAmG,QAAA,CAAiFtB,sBAAsB,MAAzG7E,EAAE,CAAAmG,QAAA,CAAoIxE,QAAQ;MAAA,CAA2C;IAAE;IAC3R;MAAS,IAAI,CAAC0E,IAAI,kBAD8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EACSvB;MAAe,EAAiD;IAAE;IAC7K;MAAS,IAAI,CAACwB,IAAI,kBAF8ExG,EAAE,CAAAyG,gBAAA;QAAAC,OAAA,GAEoClF,UAAU,EAAEA,UAAU;MAAA,EAAI;IAAE;EACtK;EAAC,OAvCKwD,eAAe;AAAA;AAwCrB;EAAA,QAAAO,SAAA,oBAAAA,SAAA;AAAA;AAeA;AACA,SAASI,sBAAsBA,CAACgB,GAAG,EAAE;EACjC,IAAI,CAACA,GAAG,CAACC,OAAO,EAAE;IACdC,OAAO,CAACC,IAAI,CAAC,2DAA2D,GACpE,6DAA6D,CAAC;EACtE;AACJ;AACA;AACA,SAASlB,oBAAoBA,CAACe,GAAG,EAAEd,SAAS,EAAE;EAC1C;EACA;EACA,IAAI,CAACc,GAAG,CAACI,IAAI,IAAI,CAAClB,SAAS,EAAE;IACzB;EACJ;EACA,MAAMmB,WAAW,GAAGL,GAAG,CAACM,aAAa,CAAC,KAAK,CAAC;EAC5CD,WAAW,CAACE,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACpDR,GAAG,CAACI,IAAI,CAACK,WAAW,CAACJ,WAAW,CAAC;EACjC,MAAMK,aAAa,GAAGC,gBAAgB,CAACN,WAAW,CAAC;EACnD;EACA;EACA;EACA,IAAIK,aAAa,IAAIA,aAAa,CAACE,OAAO,KAAK,MAAM,EAAE;IACnDV,OAAO,CAACC,IAAI,CAAC,4DAA4D,GACrE,2DAA2D,GAC3D,iEAAiE,CAAC;EAC1E;EACAE,WAAW,CAACQ,MAAM,CAAC,CAAC;AACxB;AACA;AACA,SAAS1B,qBAAqBA,CAAA,EAAG;EAC7B,IAAIrE,OAAO,CAACgG,IAAI,KAAK/F,SAAS,CAAC+F,IAAI,EAAE;IACjCZ,OAAO,CAACC,IAAI,CAAC,gCAAgC,GACzCrF,OAAO,CAACgG,IAAI,GACZ,mBAAmB,GACnB,2BAA2B,GAC3B/F,SAAS,CAAC+F,IAAI,GACd,MAAM,GACN,iEAAiE,CAAC;EAC1E;AACJ;AAEA,SAASC,aAAaA,CAACC,IAAI,EAAE;EACzB,OAAO,cAAcA,IAAI,CAAC;IACtB,IAAIrE,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACsE,SAAS;IACzB;IACA,IAAItE,QAAQA,CAACuE,KAAK,EAAE;MAChB,IAAI,CAACD,SAAS,GAAG3F,qBAAqB,CAAC4F,KAAK,CAAC;IACjD;IACA5C,WAAWA,CAAC,GAAG6C,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd,IAAI,CAACF,SAAS,GAAG,KAAK;IAC1B;EACJ,CAAC;AACL;AAEA,SAASG,UAAUA,CAACJ,IAAI,EAAEK,YAAY,EAAE;EACpC,OAAO,cAAcL,IAAI,CAAC;IACtB,IAAIM,KAAKA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,MAAM;IACtB;IACA,IAAID,KAAKA,CAACJ,KAAK,EAAE;MACb,MAAMM,YAAY,GAAGN,KAAK,IAAI,IAAI,CAACG,YAAY;MAC/C,IAAIG,YAAY,KAAK,IAAI,CAACD,MAAM,EAAE;QAC9B,IAAI,IAAI,CAACA,MAAM,EAAE;UACb,IAAI,CAACE,WAAW,CAACC,aAAa,CAACnB,SAAS,CAACM,MAAM,CAAC,OAAO,IAAI,CAACU,MAAM,EAAE,CAAC;QACzE;QACA,IAAIC,YAAY,EAAE;UACd,IAAI,CAACC,WAAW,CAACC,aAAa,CAACnB,SAAS,CAACC,GAAG,CAAC,OAAOgB,YAAY,EAAE,CAAC;QACvE;QACA,IAAI,CAACD,MAAM,GAAGC,YAAY;MAC9B;IACJ;IACAlD,WAAWA,CAAC,GAAG6C,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd,IAAI,CAACE,YAAY,GAAGA,YAAY;MAChC;MACA,IAAI,CAACC,KAAK,GAAGD,YAAY;IAC7B;EACJ,CAAC;AACL;AAEA,SAASM,kBAAkBA,CAACX,IAAI,EAAE;EAC9B,OAAO,cAAcA,IAAI,CAAC;IACtB;IACA,IAAIY,aAAaA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACC,cAAc;IAC9B;IACA,IAAID,aAAaA,CAACV,KAAK,EAAE;MACrB,IAAI,CAACW,cAAc,GAAGvG,qBAAqB,CAAC4F,KAAK,CAAC;IACtD;IACA5C,WAAWA,CAAC,GAAG6C,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd,IAAI,CAACU,cAAc,GAAG,KAAK;IAC/B;EACJ,CAAC;AACL;AAEA,SAASC,aAAaA,CAACd,IAAI,EAAEe,eAAe,GAAG,CAAC,EAAE;EAC9C,OAAO,cAAcf,IAAI,CAAC;IACtB,IAAIgB,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACrF,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAACsF,SAAS;IAC9C;IACA,IAAID,QAAQA,CAACd,KAAK,EAAE;MAChB;MACA,IAAI,CAACe,SAAS,GAAGf,KAAK,IAAI,IAAI,GAAG3F,oBAAoB,CAAC2F,KAAK,CAAC,GAAG,IAAI,CAACa,eAAe;IACvF;IACAzD,WAAWA,CAAC,GAAG6C,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd,IAAI,CAACc,SAAS,GAAGF,eAAe;MAChC,IAAI,CAACA,eAAe,GAAGA,eAAe;IAC1C;EACJ,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAMG,kBAAkB,CAAC;EACrB5D,WAAWA,CAAC6D,eAAe,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,EAAE;IAClF,IAAI,CAACJ,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC;IACA,IAAI,CAACC,UAAU,GAAG,KAAK;EAC3B;EACA;EACAC,gBAAgBA,CAAA,EAAG;IACf,MAAMC,QAAQ,GAAG,IAAI,CAACF,UAAU;IAChC,MAAMG,MAAM,GAAG,IAAI,CAACN,gBAAgB,IAAI,IAAI,CAACC,WAAW;IACxD,MAAMM,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,IAAI,CAACT,eAAe;IACpD,MAAMU,OAAO,GAAG,IAAI,CAACT,SAAS,GAAG,IAAI,CAACA,SAAS,CAACS,OAAO,GAAG,IAAI;IAC9D,MAAMC,QAAQ,GAAGF,OAAO,EAAEG,YAAY,CAACF,OAAO,EAAEF,MAAM,CAAC,IAAI,KAAK;IAChE,IAAIG,QAAQ,KAAKJ,QAAQ,EAAE;MACvB,IAAI,CAACF,UAAU,GAAGM,QAAQ;MAC1B,IAAI,CAACP,aAAa,CAACS,IAAI,CAAC,CAAC;IAC7B;EACJ;AACJ;AACA,SAASC,eAAeA,CAACjC,IAAI,EAAE;EAC3B,OAAO,cAAcA,IAAI,CAAC;IACtB;IACA,IAAIwB,UAAUA,CAAA,EAAG;MACb,OAAO,IAAI,CAACU,WAAW,CAAC,CAAC,CAACV,UAAU;IACxC;IACA,IAAIA,UAAUA,CAACtB,KAAK,EAAE;MAClB,IAAI,CAACgC,WAAW,CAAC,CAAC,CAACV,UAAU,GAAGtB,KAAK;IACzC;IACA;IACA,IAAIiC,iBAAiBA,CAAA,EAAG;MACpB,OAAO,IAAI,CAACD,WAAW,CAAC,CAAC,CAACN,OAAO;IACrC;IACA,IAAIO,iBAAiBA,CAACjC,KAAK,EAAE;MACzB,IAAI,CAACgC,WAAW,CAAC,CAAC,CAACN,OAAO,GAAG1B,KAAK;IACtC;IACA;IACAuB,gBAAgBA,CAAA,EAAG;MACf,IAAI,CAACS,WAAW,CAAC,CAAC,CAACT,gBAAgB,CAAC,CAAC;IACzC;IACAS,WAAWA,CAAA,EAAG;MACV,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;QAChB,IAAI,CAACA,QAAQ,GAAG,IAAIlB,kBAAkB,CAAC,IAAI,CAACmB,yBAAyB,EAAE,IAAI,CAACjB,SAAS,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACgB,YAAY,CAAC;MACtJ;MACA,OAAO,IAAI,CAACF,QAAQ;IACxB;IACA9E,WAAWA,CAAC,GAAG6C,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;IAClB;EACJ,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASoC,gBAAgBA,CAACvC,IAAI,EAAE;EAC5B,OAAO,cAAcA,IAAI,CAAC;IACtB1C,WAAWA,CAAC,GAAG6C,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd;MACA,IAAI,CAACqC,cAAc,GAAG,KAAK;MAC3B;AACZ;AACA;AACA;AACA;MACY,IAAI,CAACC,mBAAmB,GAAG,EAAE;MAC7B;AACZ;AACA;AACA;MACY,IAAI,CAACC,WAAW,GAAG,IAAIjI,UAAU,CAACkI,UAAU,IAAI;QAC5C;QACA;QACA,IAAI,IAAI,CAACH,cAAc,EAAE;UACrB,IAAI,CAACI,iBAAiB,CAACD,UAAU,CAAC;QACtC,CAAC,MACI;UACD,IAAI,CAACF,mBAAmB,CAACI,IAAI,CAACF,UAAU,CAAC;QAC7C;MACJ,CAAC,CAAC;IACN;IACA;AACR;AACA;AACA;AACA;IACQG,gBAAgBA,CAAA,EAAG;MACf,IAAI,IAAI,CAACN,cAAc,KAAK,OAAO5E,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QACxE,MAAMmF,KAAK,CAAC,4DAA4D,GACpE,6BAA6B,CAAC;MACtC;MACA,IAAI,CAACP,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACC,mBAAmB,CAACO,OAAO,CAAC,IAAI,CAACJ,iBAAiB,CAAC;MACxD,IAAI,CAACH,mBAAmB,GAAG,IAAI;IACnC;IACA;IACAG,iBAAiBA,CAACD,UAAU,EAAE;MAC1BA,UAAU,CAACX,IAAI,CAAC,CAAC;MACjBW,UAAU,CAACM,QAAQ,CAAC,CAAC;IACzB;EACJ,CAAC;AACL;;AAEA;AACA,MAAMC,eAAe,gBAAG,IAAI3K,cAAc,CAAC,iBAAiB,EAAE;EAC1D4E,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAE+F;AACb,CAAC,CAAC;AACF;AACA,SAASA,uBAAuBA,CAAA,EAAG;EAC/B,OAAO3K,MAAM,CAACI,SAAS,CAAC;AAC5B;AACA;AACA,MAAMwK,WAAW,CAAC;EACd9F,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC+F,cAAc,GAAG,IAAI3I,OAAO,CAAC,CAAC;IACnC;IACA,IAAI,CAAC4I,aAAa,GAAG,IAAI,CAACD,cAAc;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,kBAAkBA,CAACC,GAAG,EAAE;IACpB,OAAO,IAAI,CAACC,cAAc,CAACD,GAAG,CAAC,IAAI,IAAI,CAACE,OAAO,CAACF,GAAG,CAAC,GAAGA,GAAG,GAAG,IAAI;EACrE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,WAAWA,CAACzD,KAAK,EAAE;IACf,IAAIA,KAAK,IAAI,IAAI,IAAK,IAAI,CAACuD,cAAc,CAACvD,KAAK,CAAC,IAAI,IAAI,CAACwD,OAAO,CAACxD,KAAK,CAAE,EAAE;MACtE,OAAOA,KAAK;IAChB;IACA,OAAO,IAAI,CAAC0D,OAAO,CAAC,CAAC;EACzB;EACA;AACJ;AACA;AACA;EACIC,SAASA,CAACC,MAAM,EAAE;IACd,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACT,cAAc,CAACrB,IAAI,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI+B,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;IACvB,OAAQ,IAAI,CAACC,OAAO,CAACF,KAAK,CAAC,GAAG,IAAI,CAACE,OAAO,CAACD,MAAM,CAAC,IAC9C,IAAI,CAACE,QAAQ,CAACH,KAAK,CAAC,GAAG,IAAI,CAACG,QAAQ,CAACF,MAAM,CAAC,IAC5C,IAAI,CAACG,OAAO,CAACJ,KAAK,CAAC,GAAG,IAAI,CAACI,OAAO,CAACH,MAAM,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,QAAQA,CAACL,KAAK,EAAEC,MAAM,EAAE;IACpB,IAAID,KAAK,IAAIC,MAAM,EAAE;MACjB,IAAIK,UAAU,GAAG,IAAI,CAACZ,OAAO,CAACM,KAAK,CAAC;MACpC,IAAIO,WAAW,GAAG,IAAI,CAACb,OAAO,CAACO,MAAM,CAAC;MACtC,IAAIK,UAAU,IAAIC,WAAW,EAAE;QAC3B,OAAO,CAAC,IAAI,CAACR,WAAW,CAACC,KAAK,EAAEC,MAAM,CAAC;MAC3C;MACA,OAAOK,UAAU,IAAIC,WAAW;IACpC;IACA,OAAOP,KAAK,IAAIC,MAAM;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,SAASA,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;IACtB,IAAID,GAAG,IAAI,IAAI,CAACX,WAAW,CAACU,IAAI,EAAEC,GAAG,CAAC,GAAG,CAAC,EAAE;MACxC,OAAOA,GAAG;IACd;IACA,IAAIC,GAAG,IAAI,IAAI,CAACZ,WAAW,CAACU,IAAI,EAAEE,GAAG,CAAC,GAAG,CAAC,EAAE;MACxC,OAAOA,GAAG;IACd;IACA,OAAOF,IAAI;EACf;AACJ;AAEA,MAAMG,gBAAgB,gBAAG,IAAIrM,cAAc,CAAC,kBAAkB,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA,MAAMsM,cAAc,GAAG,oFAAoF;AAC3G;AACA,SAASC,KAAKA,CAACC,MAAM,EAAEC,aAAa,EAAE;EAClC,MAAMC,WAAW,GAAGC,KAAK,CAACH,MAAM,CAAC;EACjC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,EAAE,EAAE;IAC7BF,WAAW,CAACE,CAAC,CAAC,GAAGH,aAAa,CAACG,CAAC,CAAC;EACrC;EACA,OAAOF,WAAW;AACtB;AACA;AAAA,IACMG,iBAAiB;EAAvB,MAAMA,iBAAiB,SAAShC,WAAW,CAAC;IACxC9F,WAAWA;IACX;AACJ;AACA;AACA;IACI+H,aAAa,EAAE;MACX,KAAK,CAAC,CAAC;MACP;AACR;AACA;AACA;MACQ,IAAI,CAACC,gBAAgB,GAAG,KAAK;MAC7B;MACA,IAAI,CAACC,cAAc,GAAG/M,MAAM,CAAC0K,eAAe,EAAE;QAAEpF,QAAQ,EAAE;MAAK,CAAC,CAAC;MACjE,IAAIuH,aAAa,KAAKG,SAAS,EAAE;QAC7B,IAAI,CAACD,cAAc,GAAGF,aAAa;MACvC;MACA,KAAK,CAACxB,SAAS,CAAC,IAAI,CAAC0B,cAAc,CAAC;IACxC;IACArB,OAAOA,CAACO,IAAI,EAAE;MACV,OAAOA,IAAI,CAACgB,WAAW,CAAC,CAAC;IAC7B;IACAtB,QAAQA,CAACM,IAAI,EAAE;MACX,OAAOA,IAAI,CAACN,QAAQ,CAAC,CAAC;IAC1B;IACAC,OAAOA,CAACK,IAAI,EAAE;MACV,OAAOA,IAAI,CAACL,OAAO,CAAC,CAAC;IACzB;IACAsB,YAAYA,CAACjB,IAAI,EAAE;MACf,OAAOA,IAAI,CAACkB,MAAM,CAAC,CAAC;IACxB;IACAC,aAAaA,CAACC,KAAK,EAAE;MACjB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClC,MAAM,EAAE;QAAEmC,KAAK,EAAEJ,KAAK;QAAEK,QAAQ,EAAE;MAAM,CAAC,CAAC;MACnF,OAAOpB,KAAK,CAAC,EAAE,EAAEK,CAAC,IAAI,IAAI,CAACgB,OAAO,CAACL,GAAG,EAAE,IAAIM,IAAI,CAAC,IAAI,EAAEjB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClE;IACAkB,YAAYA,CAAA,EAAG;MACX,MAAMP,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClC,MAAM,EAAE;QAAEwC,GAAG,EAAE,SAAS;QAAEJ,QAAQ,EAAE;MAAM,CAAC,CAAC;MACrF,OAAOpB,KAAK,CAAC,EAAE,EAAEK,CAAC,IAAI,IAAI,CAACgB,OAAO,CAACL,GAAG,EAAE,IAAIM,IAAI,CAAC,IAAI,EAAE,CAAC,EAAEjB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtE;IACAoB,iBAAiBA,CAACV,KAAK,EAAE;MACrB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClC,MAAM,EAAE;QAAE0C,OAAO,EAAEX,KAAK;QAAEK,QAAQ,EAAE;MAAM,CAAC,CAAC;MACrF,OAAOpB,KAAK,CAAC,CAAC,EAAEK,CAAC,IAAI,IAAI,CAACgB,OAAO,CAACL,GAAG,EAAE,IAAIM,IAAI,CAAC,IAAI,EAAE,CAAC,EAAEjB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrE;IACAsB,WAAWA,CAAChC,IAAI,EAAE;MACd,MAAMqB,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClC,MAAM,EAAE;QAAE4C,IAAI,EAAE,SAAS;QAAER,QAAQ,EAAE;MAAM,CAAC,CAAC;MACtF,OAAO,IAAI,CAACC,OAAO,CAACL,GAAG,EAAErB,IAAI,CAAC;IAClC;IACAkC,iBAAiBA,CAAA,EAAG;MAChB;MACA,OAAO,CAAC;IACZ;IACAC,iBAAiBA,CAACnC,IAAI,EAAE;MACpB,OAAO,IAAI,CAACL,OAAO,CAAC,IAAI,CAACyC,uBAAuB,CAAC,IAAI,CAAC3C,OAAO,CAACO,IAAI,CAAC,EAAE,IAAI,CAACN,QAAQ,CAACM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACrG;IACAqC,KAAKA,CAACrC,IAAI,EAAE;MACR,OAAO,IAAI2B,IAAI,CAAC3B,IAAI,CAACsC,OAAO,CAAC,CAAC,CAAC;IACnC;IACAC,UAAUA,CAACN,IAAI,EAAET,KAAK,EAAExB,IAAI,EAAE;MAC1B,IAAI,OAAO7G,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;QAC/C;QACA;QACA,IAAIqI,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;UACzB,MAAMlD,KAAK,CAAC,wBAAwBkD,KAAK,4CAA4C,CAAC;QAC1F;QACA,IAAIxB,IAAI,GAAG,CAAC,EAAE;UACV,MAAM1B,KAAK,CAAC,iBAAiB0B,IAAI,mCAAmC,CAAC;QACzE;MACJ;MACA,IAAIwC,MAAM,GAAG,IAAI,CAACJ,uBAAuB,CAACH,IAAI,EAAET,KAAK,EAAExB,IAAI,CAAC;MAC5D;MACA,IAAIwC,MAAM,CAAC9C,QAAQ,CAAC,CAAC,IAAI8B,KAAK,KAAK,OAAOrI,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAC/E,MAAMmF,KAAK,CAAC,iBAAiB0B,IAAI,2BAA2BwB,KAAK,IAAI,CAAC;MAC1E;MACA,OAAOgB,MAAM;IACjB;IACAC,KAAKA,CAAA,EAAG;MACJ,OAAO,IAAId,IAAI,CAAC,CAAC;IACrB;IACAe,KAAKA,CAACjH,KAAK,EAAEkH,WAAW,EAAE;MACtB;MACA;MACA,IAAI,OAAOlH,KAAK,IAAI,QAAQ,EAAE;QAC1B,OAAO,IAAIkG,IAAI,CAAClG,KAAK,CAAC;MAC1B;MACA,OAAOA,KAAK,GAAG,IAAIkG,IAAI,CAACA,IAAI,CAACe,KAAK,CAACjH,KAAK,CAAC,CAAC,GAAG,IAAI;IACrD;IACAmH,MAAMA,CAAC5C,IAAI,EAAE6C,aAAa,EAAE;MACxB,IAAI,CAAC,IAAI,CAAC5D,OAAO,CAACe,IAAI,CAAC,EAAE;QACrB,MAAM1B,KAAK,CAAC,gDAAgD,CAAC;MACjE;MACA,MAAM+C,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClC,MAAM,EAAE;QAAE,GAAGwD,aAAa;QAAEpB,QAAQ,EAAE;MAAM,CAAC,CAAC;MACvF,OAAO,IAAI,CAACC,OAAO,CAACL,GAAG,EAAErB,IAAI,CAAC;IAClC;IACA8C,gBAAgBA,CAAC9C,IAAI,EAAE+C,KAAK,EAAE;MAC1B,OAAO,IAAI,CAACC,iBAAiB,CAAChD,IAAI,EAAE+C,KAAK,GAAG,EAAE,CAAC;IACnD;IACAC,iBAAiBA,CAAChD,IAAI,EAAEiD,MAAM,EAAE;MAC5B,IAAIC,OAAO,GAAG,IAAI,CAACd,uBAAuB,CAAC,IAAI,CAAC3C,OAAO,CAACO,IAAI,CAAC,EAAE,IAAI,CAACN,QAAQ,CAACM,IAAI,CAAC,GAAGiD,MAAM,EAAE,IAAI,CAACtD,OAAO,CAACK,IAAI,CAAC,CAAC;MAChH;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACN,QAAQ,CAACwD,OAAO,CAAC,IAAI,CAAE,CAAC,IAAI,CAACxD,QAAQ,CAACM,IAAI,CAAC,GAAGiD,MAAM,IAAI,EAAE,GAAI,EAAE,IAAI,EAAE,EAAE;QAC7EC,OAAO,GAAG,IAAI,CAACd,uBAAuB,CAAC,IAAI,CAAC3C,OAAO,CAACyD,OAAO,CAAC,EAAE,IAAI,CAACxD,QAAQ,CAACwD,OAAO,CAAC,EAAE,CAAC,CAAC;MAC5F;MACA,OAAOA,OAAO;IAClB;IACAC,eAAeA,CAACnD,IAAI,EAAEoD,IAAI,EAAE;MACxB,OAAO,IAAI,CAAChB,uBAAuB,CAAC,IAAI,CAAC3C,OAAO,CAACO,IAAI,CAAC,EAAE,IAAI,CAACN,QAAQ,CAACM,IAAI,CAAC,EAAE,IAAI,CAACL,OAAO,CAACK,IAAI,CAAC,GAAGoD,IAAI,CAAC;IAC3G;IACAC,SAASA,CAACrD,IAAI,EAAE;MACZ,OAAO,CACHA,IAAI,CAACsD,cAAc,CAAC,CAAC,EACrB,IAAI,CAACC,OAAO,CAACvD,IAAI,CAACwD,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,EACpC,IAAI,CAACD,OAAO,CAACvD,IAAI,CAACyD,UAAU,CAAC,CAAC,CAAC,CAClC,CAACC,IAAI,CAAC,GAAG,CAAC;IACf;IACA;AACJ;AACA;AACA;AACA;IACIxE,WAAWA,CAACzD,KAAK,EAAE;MACf,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC3B,IAAI,CAACA,KAAK,EAAE;UACR,OAAO,IAAI;QACf;QACA;QACA;QACA,IAAI2E,cAAc,CAACuD,IAAI,CAAClI,KAAK,CAAC,EAAE;UAC5B,IAAIuE,IAAI,GAAG,IAAI2B,IAAI,CAAClG,KAAK,CAAC;UAC1B,IAAI,IAAI,CAACwD,OAAO,CAACe,IAAI,CAAC,EAAE;YACpB,OAAOA,IAAI;UACf;QACJ;MACJ;MACA,OAAO,KAAK,CAACd,WAAW,CAACzD,KAAK,CAAC;IACnC;IACAuD,cAAcA,CAACD,GAAG,EAAE;MAChB,OAAOA,GAAG,YAAY4C,IAAI;IAC9B;IACA1C,OAAOA,CAACe,IAAI,EAAE;MACV,OAAO,CAAC4D,KAAK,CAAC5D,IAAI,CAACsC,OAAO,CAAC,CAAC,CAAC;IACjC;IACAnD,OAAOA,CAAA,EAAG;MACN,OAAO,IAAIwC,IAAI,CAACkC,GAAG,CAAC;IACxB;IACA;IACAzB,uBAAuBA,CAACH,IAAI,EAAET,KAAK,EAAExB,IAAI,EAAE;MACvC;MACA;MACA,MAAM8D,CAAC,GAAG,IAAInC,IAAI,CAAC,CAAC;MACpBmC,CAAC,CAACC,WAAW,CAAC9B,IAAI,EAAET,KAAK,EAAExB,IAAI,CAAC;MAChC8D,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACtB,OAAOF,CAAC;IACZ;IACA;AACJ;AACA;AACA;AACA;IACIP,OAAOA,CAACU,CAAC,EAAE;MACP,OAAO,CAAC,IAAI,GAAGA,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIxC,OAAOA,CAACL,GAAG,EAAErB,IAAI,EAAE;MACf;MACA;MACA,MAAM8D,CAAC,GAAG,IAAInC,IAAI,CAAC,CAAC;MACpBmC,CAAC,CAACK,cAAc,CAACnE,IAAI,CAACgB,WAAW,CAAC,CAAC,EAAEhB,IAAI,CAACN,QAAQ,CAAC,CAAC,EAAEM,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC;MACrEmE,CAAC,CAACM,WAAW,CAACpE,IAAI,CAACqE,QAAQ,CAAC,CAAC,EAAErE,IAAI,CAACsE,UAAU,CAAC,CAAC,EAAEtE,IAAI,CAACuE,UAAU,CAAC,CAAC,EAAEvE,IAAI,CAACwE,eAAe,CAAC,CAAC,CAAC;MAC5F,OAAOnD,GAAG,CAACuB,MAAM,CAACkB,CAAC,CAAC;IACxB;IACA;MAAS,IAAI,CAAClK,IAAI,YAAA6K,0BAAA3K,CAAA;QAAA,YAAAA,CAAA,IAAwF6G,iBAAiB,EApiB3B/M,EAAE,CAAAmG,QAAA,CAoiB2C0E,eAAe;MAAA,CAA6D;IAAE;IAC3N;MAAS,IAAI,CAACiG,KAAK,kBAriB6E9Q,EAAE,CAAA+Q,kBAAA;QAAAC,KAAA,EAqiBYjE,iBAAiB;QAAAhI,OAAA,EAAjBgI,iBAAiB,CAAA/G;MAAA,EAAG;IAAE;EACxI;EAAC,OA1LK+G,iBAAiB;AAAA;AA2LvB;EAAA,QAAAxH,SAAA,oBAAAA,SAAA;AAAA;AASA,MAAM0L,uBAAuB,GAAG;EAC5BnC,KAAK,EAAE;IACHoC,SAAS,EAAE;EACf,CAAC;EACD3J,OAAO,EAAE;IACL2J,SAAS,EAAE;MAAE7C,IAAI,EAAE,SAAS;MAAET,KAAK,EAAE,SAAS;MAAEK,GAAG,EAAE;IAAU,CAAC;IAChEkD,cAAc,EAAE;MAAE9C,IAAI,EAAE,SAAS;MAAET,KAAK,EAAE;IAAQ,CAAC;IACnDwD,aAAa,EAAE;MAAE/C,IAAI,EAAE,SAAS;MAAET,KAAK,EAAE,MAAM;MAAEK,GAAG,EAAE;IAAU,CAAC;IACjEoD,kBAAkB,EAAE;MAAEhD,IAAI,EAAE,SAAS;MAAET,KAAK,EAAE;IAAO;EACzD;AACJ,CAAC;AAAC,IAEI0D,gBAAgB;EAAtB,MAAMA,gBAAgB,CAAC;IACnB;MAAS,IAAI,CAACtL,IAAI,YAAAuL,yBAAArL,CAAA;QAAA,YAAAA,CAAA,IAAwFoL,gBAAgB;MAAA,CAAkD;IAAE;IAC9K;MAAS,IAAI,CAACjL,IAAI,kBA9jB8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EA8jBS+K;MAAgB,EAAG;IAAE;IAChI;MAAS,IAAI,CAAC9K,IAAI,kBA/jB8ExG,EAAE,CAAAyG,gBAAA;QAAA+K,SAAA,EA+jBsC,CAAC;UAAEC,OAAO,EAAE1G,WAAW;UAAE2G,QAAQ,EAAE3E;QAAkB,CAAC;MAAC,EAAG;IAAE;EACxM;EAAC,OAJKuE,gBAAgB;AAAA;AAKtB;EAAA,QAAA/L,SAAA,oBAAAA,SAAA;AAAA;AAKc,IACRoM,mBAAmB;EAAzB,MAAMA,mBAAmB,CAAC;IACtB;MAAS,IAAI,CAAC3L,IAAI,YAAA4L,4BAAA1L,CAAA;QAAA,YAAAA,CAAA,IAAwFyL,mBAAmB;MAAA,CAAkD;IAAE;IACjL;MAAS,IAAI,CAACtL,IAAI,kBAzkB8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EAykBSoL;MAAmB,EAAG;IAAE;IACnI;MAAS,IAAI,CAACnL,IAAI,kBA1kB8ExG,EAAE,CAAAyG,gBAAA;QAAA+K,SAAA,EA0kByC,CAACK,wBAAwB,CAAC,CAAC;MAAC,EAAG;IAAE;EAChL;EAAC,OAJKF,mBAAmB;AAAA;AAKzB;EAAA,QAAApM,SAAA,oBAAAA,SAAA;AAAA;AAMA,SAASsM,wBAAwBA,CAACC,OAAO,GAAGb,uBAAuB,EAAE;EACjE,OAAO,CACH;IAAEQ,OAAO,EAAE1G,WAAW;IAAE2G,QAAQ,EAAE3E;EAAkB,CAAC,EACrD;IAAE0E,OAAO,EAAElF,gBAAgB;IAAEwF,QAAQ,EAAED;EAAQ,CAAC,CACnD;AACL;;AAEA;AAAA,IACME,4BAA4B;EAAlC,MAAMA,4BAA4B,CAAC;IAC/BtI,YAAYA,CAACF,OAAO,EAAEyI,IAAI,EAAE;MACxB,OAAO,CAAC,EAAEzI,OAAO,IAAIA,OAAO,CAAC+B,OAAO,KAAK/B,OAAO,CAAC0I,KAAK,IAAKD,IAAI,IAAIA,IAAI,CAACE,SAAU,CAAC,CAAC;IACxF;IACA;MAAS,IAAI,CAACnM,IAAI,YAAAoM,qCAAAlM,CAAA;QAAA,YAAAA,CAAA,IAAwF8L,4BAA4B;MAAA,CAAoD;IAAE;IAC5L;MAAS,IAAI,CAAClB,KAAK,kBA/lB6E9Q,EAAE,CAAA+Q,kBAAA;QAAAC,KAAA,EA+lBYgB,4BAA4B;QAAAjN,OAAA,EAA5BiN,4BAA4B,CAAAhM;MAAA,EAAG;IAAE;EACnJ;EAAC,OANKgM,4BAA4B;AAAA;AAOlC;EAAA,QAAAzM,SAAA,oBAAAA,SAAA;AAAA;AAGA;AAAA,IACM8M,iBAAiB;EAAvB,MAAMA,iBAAiB,CAAC;IACpB3I,YAAYA,CAACF,OAAO,EAAEyI,IAAI,EAAE;MACxB,OAAO,CAAC,EAAEzI,OAAO,IAAIA,OAAO,CAAC+B,OAAO,KAAK/B,OAAO,CAAC8I,OAAO,IAAKL,IAAI,IAAIA,IAAI,CAACE,SAAU,CAAC,CAAC;IAC1F;IACA;MAAS,IAAI,CAACnM,IAAI,YAAAuM,0BAAArM,CAAA;QAAA,YAAAA,CAAA,IAAwFmM,iBAAiB;MAAA,CAAoD;IAAE;IACjL;MAAS,IAAI,CAACvB,KAAK,kBA1mB6E9Q,EAAE,CAAA+Q,kBAAA;QAAAC,KAAA,EA0mBYqB,iBAAiB;QAAAtN,OAAA,EAAjBsN,iBAAiB,CAAArM,IAAA;QAAAlB,UAAA,EAAc;MAAM,EAAG;IAAE;EAC5J;EAAC,OANKuN,iBAAiB;AAAA;AAOvB;EAAA,QAAA9M,SAAA,oBAAAA,SAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AAJA,IAKMiN,OAAO;EAAb,MAAMA,OAAO,CAAC;IACV;MAAS,IAAI,CAACxM,IAAI,YAAAyM,gBAAAvM,CAAA;QAAA,YAAAA,CAAA,IAAwFsM,OAAO;MAAA,CAAmD;IAAE;IACtK;MAAS,IAAI,CAACE,IAAI,kBAxnB8E1S,EAAE,CAAA2S,iBAAA;QAAApM,IAAA,EAwnBJiM,OAAO;QAAAI,SAAA;QAAAC,SAAA;QAAAC,UAAA;MAAA,EAA8G;IAAE;EACzN;EAAC,OAHKN,OAAO;AAAA;AAIb;EAAA,QAAAjN,SAAA,oBAAAA,SAAA;AAAA;AAQA;AACA;AACA;AACA;AACA,SAASwN,QAAQA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,GAAG,KAAK,EAAE;EAC9C;EACA;EACAF,KAAK,CAACG,OAAO,CAACC,IAAI,CAAC9Q,SAAS,CAAC0Q,KAAK,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC;IAAE3G;EAAO,CAAC,KAAK;IAC3D4G,QAAQ,CAACL,OAAO,EAAE,GAAGC,MAAM,SAAS,EAAE,KAAK,CAAC;IAC5CI,QAAQ,CAACL,OAAO,EAAE,GAAGC,MAAM,SAAS,EAAE,KAAK,CAAC;IAC5CI,QAAQ,CAACL,OAAO,EAAE,GAAGC,MAAM,aAAa,EAAE,KAAK,CAAC;IAChD,IAAIxG,MAAM,KAAK,CAAC,IAAIA,MAAM,KAAK,CAAC,EAAE;MAC9B4G,QAAQ,CAACL,OAAO,EAAE,GAAGC,MAAM,IAAIxG,MAAM,OAAO,EAAE,IAAI,CAAC;IACvD,CAAC,MACI,IAAIA,MAAM,GAAG,CAAC,EAAE;MACjB4G,QAAQ,CAACL,OAAO,EAAE,GAAGC,MAAM,aAAa,EAAE,IAAI,CAAC;IACnD;EACJ,CAAC,CAAC;AACN;AACA;AACA,SAASI,QAAQA,CAACL,OAAO,EAAEM,SAAS,EAAEC,KAAK,EAAE;EACzCP,OAAO,CAAC5K,aAAa,CAACnB,SAAS,CAACuM,MAAM,CAACF,SAAS,EAAEC,KAAK,CAAC;AAC5D;AAAC,IACKE,aAAa;EAAnB,MAAMA,aAAa,CAAC;IAChB;MAAS,IAAI,CAAC1N,IAAI,YAAA2N,sBAAAzN,CAAA;QAAA,YAAAA,CAAA,IAAwFwN,aAAa;MAAA,CAAkD;IAAE;IAC3K;MAAS,IAAI,CAACrN,IAAI,kBA3pB8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EA2pBSmN;MAAa,EAA6E;IAAE;IACvM;MAAS,IAAI,CAAClN,IAAI,kBA5pB8ExG,EAAE,CAAAyG,gBAAA;QAAAC,OAAA,GA4pBkC1B,eAAe,EAAEA,eAAe;MAAA,EAAI;IAAE;EAC9K;EAAC,OAJK0O,aAAa;AAAA;AAKnB;EAAA,QAAAnO,SAAA,oBAAAA,SAAA;AAAA;;AAQA;AACA,IAAIqO,WAAW,gBACd,UAAUA,WAAW,EAAE;EACpBA,WAAW,CAACA,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACvDA,WAAW,CAACA,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACnDA,WAAW,CAACA,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACzDA,WAAW,CAACA,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EAAC,OAJ3CA,WAAW;AAKtB,CAAC,CAAEA,WAAW,IAAmB,CAAC,CAAE,CANrB;AAOf;AACA;AACA;AACA,MAAMC,SAAS,CAAC;EACZ5O,WAAWA,CAAC6O,SAAS,EACrB;EACAb,OAAO,EACP;EACAc,MAAM,EACN;EACAC,oCAAoC,GAAG,KAAK,EAAE;IAC1C,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,oCAAoC,GAAGA,oCAAoC;IAChF;IACA,IAAI,CAACC,KAAK,GAAGL,WAAW,CAACM,MAAM;EACnC;EACA;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACL,SAAS,CAACM,aAAa,CAAC,IAAI,CAAC;EACtC;AACJ;;AAEA;AACA,MAAMC,8BAA8B,gBAAGtS,+BAA+B,CAAC;EACnEuS,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACA,MAAMC,kBAAkB,CAAC;EACrBvP,WAAWA,CAAA,EAAG;IACV,IAAI,CAACwP,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACxB;IACA,IAAI,CAACC,qBAAqB,GAAIC,KAAK,IAAK;MACpC,MAAMC,MAAM,GAAG7S,eAAe,CAAC4S,KAAK,CAAC;MACrC,IAAIC,MAAM,EAAE;QACR,IAAI,CAACJ,OAAO,CAACK,GAAG,CAACF,KAAK,CAACrO,IAAI,CAAC,EAAEoE,OAAO,CAAC,CAACoK,QAAQ,EAAE9B,OAAO,KAAK;UACzD,IAAIA,OAAO,KAAK4B,MAAM,IAAI5B,OAAO,CAAC+B,QAAQ,CAACH,MAAM,CAAC,EAAE;YAChDE,QAAQ,CAACpK,OAAO,CAACsK,OAAO,IAAIA,OAAO,CAACC,WAAW,CAACN,KAAK,CAAC,CAAC;UAC3D;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;EACL;EACA;EACAO,UAAUA,CAACC,MAAM,EAAErP,IAAI,EAAEkN,OAAO,EAAEgC,OAAO,EAAE;IACvC,MAAMI,gBAAgB,GAAG,IAAI,CAACZ,OAAO,CAACK,GAAG,CAAC/O,IAAI,CAAC;IAC/C,IAAIsP,gBAAgB,EAAE;MAClB,MAAMC,kBAAkB,GAAGD,gBAAgB,CAACP,GAAG,CAAC7B,OAAO,CAAC;MACxD,IAAIqC,kBAAkB,EAAE;QACpBA,kBAAkB,CAACnO,GAAG,CAAC8N,OAAO,CAAC;MACnC,CAAC,MACI;QACDI,gBAAgB,CAACE,GAAG,CAACtC,OAAO,EAAE,IAAIuC,GAAG,CAAC,CAACP,OAAO,CAAC,CAAC,CAAC;MACrD;IACJ,CAAC,MACI;MACD,IAAI,CAACR,OAAO,CAACc,GAAG,CAACxP,IAAI,EAAE,IAAI2O,GAAG,CAAC,CAAC,CAACzB,OAAO,EAAE,IAAIuC,GAAG,CAAC,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChEG,MAAM,CAACK,iBAAiB,CAAC,MAAM;QAC3BC,QAAQ,CAACC,gBAAgB,CAAC5P,IAAI,EAAE,IAAI,CAAC4O,qBAAqB,EAAEN,8BAA8B,CAAC;MAC/F,CAAC,CAAC;IACN;EACJ;EACA;EACAuB,aAAaA,CAAC7P,IAAI,EAAEkN,OAAO,EAAEgC,OAAO,EAAE;IAClC,MAAMI,gBAAgB,GAAG,IAAI,CAACZ,OAAO,CAACK,GAAG,CAAC/O,IAAI,CAAC;IAC/C,IAAI,CAACsP,gBAAgB,EAAE;MACnB;IACJ;IACA,MAAMC,kBAAkB,GAAGD,gBAAgB,CAACP,GAAG,CAAC7B,OAAO,CAAC;IACxD,IAAI,CAACqC,kBAAkB,EAAE;MACrB;IACJ;IACAA,kBAAkB,CAACO,MAAM,CAACZ,OAAO,CAAC;IAClC,IAAIK,kBAAkB,CAACQ,IAAI,KAAK,CAAC,EAAE;MAC/BT,gBAAgB,CAACQ,MAAM,CAAC5C,OAAO,CAAC;IACpC;IACA,IAAIoC,gBAAgB,CAACS,IAAI,KAAK,CAAC,EAAE;MAC7B,IAAI,CAACrB,OAAO,CAACoB,MAAM,CAAC9P,IAAI,CAAC;MACzB2P,QAAQ,CAACK,mBAAmB,CAAChQ,IAAI,EAAE,IAAI,CAAC4O,qBAAqB,EAAEN,8BAA8B,CAAC;IAClG;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA,MAAM2B,4BAA4B,GAAG;EACjCC,aAAa,EAAE,GAAG;EAClBC,YAAY,EAAE;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,GAAG;AACpC;AACA,MAAMC,4BAA4B,gBAAGrU,+BAA+B,CAAC;EACjEuS,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACA,MAAM8B,iBAAiB,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC;AACrD;AACA,MAAMC,eAAe,GAAG,CAAC,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,aAAa,CAAC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjB;IAAS,IAAI,CAACC,aAAa,gBAAG,IAAIhC,kBAAkB,CAAC,CAAC;EAAE;EACxDvP,WAAWA,CAACwR,OAAO,EAAEC,OAAO,EAAEC,mBAAmB,EAAEC,SAAS,EAAE;IAC1D,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B;IACA,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAIpC,GAAG,CAAC,CAAC;IAC/B;IACA,IAAI,CAACqC,0BAA0B,GAAG,KAAK;IACvC;IACA,IAAIH,SAAS,CAAC/Q,SAAS,EAAE;MACrB,IAAI,CAACmR,iBAAiB,GAAG7U,aAAa,CAACwU,mBAAmB,CAAC;IAC/D;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIM,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAEpD,MAAM,GAAG,CAAC,CAAC,EAAE;IAC5B,MAAMqD,aAAa,GAAI,IAAI,CAACC,cAAc,GACtC,IAAI,CAACA,cAAc,IAAI,IAAI,CAACL,iBAAiB,CAACM,qBAAqB,CAAC,CAAE;IAC1E,MAAMC,eAAe,GAAG;MAAE,GAAGvB,4BAA4B;MAAE,GAAGjC,MAAM,CAACyD;IAAU,CAAC;IAChF,IAAIzD,MAAM,CAAC0D,QAAQ,EAAE;MACjBP,CAAC,GAAGE,aAAa,CAACM,IAAI,GAAGN,aAAa,CAACO,KAAK,GAAG,CAAC;MAChDR,CAAC,GAAGC,aAAa,CAACQ,GAAG,GAAGR,aAAa,CAACS,MAAM,GAAG,CAAC;IACpD;IACA,MAAMC,MAAM,GAAG/D,MAAM,CAAC+D,MAAM,IAAIC,wBAAwB,CAACb,CAAC,EAAEC,CAAC,EAAEC,aAAa,CAAC;IAC7E,MAAMY,OAAO,GAAGd,CAAC,GAAGE,aAAa,CAACM,IAAI;IACtC,MAAMO,OAAO,GAAGd,CAAC,GAAGC,aAAa,CAACQ,GAAG;IACrC,MAAM3B,aAAa,GAAGsB,eAAe,CAACtB,aAAa;IACnD,MAAMiC,MAAM,GAAGxC,QAAQ,CAACzO,aAAa,CAAC,KAAK,CAAC;IAC5CiR,MAAM,CAAChR,SAAS,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAC1C+Q,MAAM,CAAC1K,KAAK,CAACkK,IAAI,GAAG,GAAGM,OAAO,GAAGF,MAAM,IAAI;IAC3CI,MAAM,CAAC1K,KAAK,CAACoK,GAAG,GAAG,GAAGK,OAAO,GAAGH,MAAM,IAAI;IAC1CI,MAAM,CAAC1K,KAAK,CAACqK,MAAM,GAAG,GAAGC,MAAM,GAAG,CAAC,IAAI;IACvCI,MAAM,CAAC1K,KAAK,CAACmK,KAAK,GAAG,GAAGG,MAAM,GAAG,CAAC,IAAI;IACtC;IACA;IACA,IAAI/D,MAAM,CAAC9L,KAAK,IAAI,IAAI,EAAE;MACtBiQ,MAAM,CAAC1K,KAAK,CAAC2K,eAAe,GAAGpE,MAAM,CAAC9L,KAAK;IAC/C;IACAiQ,MAAM,CAAC1K,KAAK,CAAC4K,kBAAkB,GAAG,GAAGnC,aAAa,IAAI;IACtD,IAAI,CAACe,iBAAiB,CAAC5P,WAAW,CAAC8Q,MAAM,CAAC;IAC1C;IACA;IACA;IACA;IACA,MAAMG,cAAc,GAAGC,MAAM,CAAChR,gBAAgB,CAAC4Q,MAAM,CAAC;IACtD,MAAMK,sBAAsB,GAAGF,cAAc,CAACG,kBAAkB;IAChE,MAAMC,sBAAsB,GAAGJ,cAAc,CAACD,kBAAkB;IAChE;IACA;IACA;IACA;IACA;IACA,MAAMM,mCAAmC,GAAGH,sBAAsB,KAAK,MAAM;IACzE;IACA;IACAE,sBAAsB,KAAK,IAAI,IAC/BA,sBAAsB,KAAK,QAAQ;IACnC;IACCrB,aAAa,CAACO,KAAK,KAAK,CAAC,IAAIP,aAAa,CAACS,MAAM,KAAK,CAAE;IAC7D;IACA,MAAMc,SAAS,GAAG,IAAI9E,SAAS,CAAC,IAAI,EAAEqE,MAAM,EAAEnE,MAAM,EAAE2E,mCAAmC,CAAC;IAC1F;IACA;IACA;IACA;IACAR,MAAM,CAAC1K,KAAK,CAACoL,SAAS,GAAG,kBAAkB;IAC3CD,SAAS,CAAC1E,KAAK,GAAGL,WAAW,CAACiF,SAAS;IACvC,IAAI,CAAC9E,MAAM,CAAC+E,UAAU,EAAE;MACpB,IAAI,CAACC,0BAA0B,GAAGJ,SAAS;IAC/C;IACA,IAAIK,cAAc,GAAG,IAAI;IACzB;IACA;IACA,IAAI,CAACN,mCAAmC,KAAKzC,aAAa,IAAIsB,eAAe,CAACrB,YAAY,CAAC,EAAE;MACzF,IAAI,CAACQ,OAAO,CAACjB,iBAAiB,CAAC,MAAM;QACjC,MAAMwD,eAAe,GAAGA,CAAA,KAAM,IAAI,CAACC,uBAAuB,CAACP,SAAS,CAAC;QACrE,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM,IAAI,CAACC,cAAc,CAACT,SAAS,CAAC;QAC/DT,MAAM,CAACvC,gBAAgB,CAAC,eAAe,EAAEsD,eAAe,CAAC;QACzD;QACA;QACA;QACAf,MAAM,CAACvC,gBAAgB,CAAC,kBAAkB,EAAEwD,kBAAkB,CAAC;QAC/DH,cAAc,GAAG;UAAEC,eAAe;UAAEE;QAAmB,CAAC;MAC5D,CAAC,CAAC;IACN;IACA;IACA,IAAI,CAACrC,cAAc,CAACvB,GAAG,CAACoD,SAAS,EAAEK,cAAc,CAAC;IAClD;IACA;IACA,IAAIN,mCAAmC,IAAI,CAACzC,aAAa,EAAE;MACvD,IAAI,CAACiD,uBAAuB,CAACP,SAAS,CAAC;IAC3C;IACA,OAAOA,SAAS;EACpB;EACA;EACAvE,aAAaA,CAACuE,SAAS,EAAE;IACrB;IACA,IAAIA,SAAS,CAAC1E,KAAK,KAAKL,WAAW,CAACyF,UAAU,IAAIV,SAAS,CAAC1E,KAAK,KAAKL,WAAW,CAACM,MAAM,EAAE;MACtF;IACJ;IACA,MAAMoF,QAAQ,GAAGX,SAAS,CAAC1F,OAAO;IAClC,MAAMsE,eAAe,GAAG;MAAE,GAAGvB,4BAA4B;MAAE,GAAG2C,SAAS,CAAC5E,MAAM,CAACyD;IAAU,CAAC;IAC1F;IACA;IACA8B,QAAQ,CAAC9L,KAAK,CAAC4K,kBAAkB,GAAG,GAAGb,eAAe,CAACrB,YAAY,IAAI;IACvEoD,QAAQ,CAAC9L,KAAK,CAAC+L,OAAO,GAAG,GAAG;IAC5BZ,SAAS,CAAC1E,KAAK,GAAGL,WAAW,CAACyF,UAAU;IACxC;IACA;IACA,IAAIV,SAAS,CAAC3E,oCAAoC,IAAI,CAACuD,eAAe,CAACrB,YAAY,EAAE;MACjF,IAAI,CAACgD,uBAAuB,CAACP,SAAS,CAAC;IAC3C;EACJ;EACA;EACAa,UAAUA,CAAA,EAAG;IACT,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAAC9O,OAAO,CAACuN,MAAM,IAAIA,MAAM,CAAC/D,OAAO,CAAC,CAAC,CAAC;EAChE;EACA;EACAuF,uBAAuBA,CAAA,EAAG;IACtB,IAAI,CAACD,iBAAiB,CAAC,CAAC,CAAC9O,OAAO,CAACuN,MAAM,IAAI;MACvC,IAAI,CAACA,MAAM,CAACnE,MAAM,CAAC+E,UAAU,EAAE;QAC3BZ,MAAM,CAAC/D,OAAO,CAAC,CAAC;MACpB;IACJ,CAAC,CAAC;EACN;EACA;EACAwF,kBAAkBA,CAAChD,mBAAmB,EAAE;IACpC,MAAM1D,OAAO,GAAG9Q,aAAa,CAACwU,mBAAmB,CAAC;IAClD,IAAI,CAAC,IAAI,CAACC,SAAS,CAAC/Q,SAAS,IAAI,CAACoN,OAAO,IAAIA,OAAO,KAAK,IAAI,CAAC2G,eAAe,EAAE;MAC3E;IACJ;IACA;IACA,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACD,eAAe,GAAG3G,OAAO;IAC9B;IACA;IACAoD,iBAAiB,CAAC1L,OAAO,CAACpE,IAAI,IAAI;MAC9BgQ,cAAc,CAACC,aAAa,CAACrB,UAAU,CAAC,IAAI,CAACuB,OAAO,EAAEnQ,IAAI,EAAE0M,OAAO,EAAE,IAAI,CAAC;IAC9E,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIiC,WAAWA,CAACN,KAAK,EAAE;IACf,IAAIA,KAAK,CAACrO,IAAI,KAAK,WAAW,EAAE;MAC5B,IAAI,CAACuT,YAAY,CAAClF,KAAK,CAAC;IAC5B,CAAC,MACI,IAAIA,KAAK,CAACrO,IAAI,KAAK,YAAY,EAAE;MAClC,IAAI,CAACwT,aAAa,CAACnF,KAAK,CAAC;IAC7B,CAAC,MACI;MACD,IAAI,CAACoF,YAAY,CAAC,CAAC;IACvB;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACjD,0BAA0B,EAAE;MAClC;MACA;MACA;MACA;MACA;MACA,IAAI,CAACL,OAAO,CAACjB,iBAAiB,CAAC,MAAM;QACjCa,eAAe,CAAC3L,OAAO,CAACpE,IAAI,IAAI;UAC5B,IAAI,CAACqT,eAAe,CAACjE,gBAAgB,CAACpP,IAAI,EAAE,IAAI,EAAE6P,4BAA4B,CAAC;QACnF,CAAC,CAAC;MACN,CAAC,CAAC;MACF,IAAI,CAACW,0BAA0B,GAAG,IAAI;IAC1C;EACJ;EACA;EACAmC,uBAAuBA,CAACP,SAAS,EAAE;IAC/B,IAAIA,SAAS,CAAC1E,KAAK,KAAKL,WAAW,CAACiF,SAAS,EAAE;MAC3C,IAAI,CAACoB,uBAAuB,CAACtB,SAAS,CAAC;IAC3C,CAAC,MACI,IAAIA,SAAS,CAAC1E,KAAK,KAAKL,WAAW,CAACyF,UAAU,EAAE;MACjD,IAAI,CAACD,cAAc,CAACT,SAAS,CAAC;IAClC;EACJ;EACA;AACJ;AACA;AACA;EACIsB,uBAAuBA,CAACtB,SAAS,EAAE;IAC/B,MAAMuB,2BAA2B,GAAGvB,SAAS,KAAK,IAAI,CAACI,0BAA0B;IACjF,MAAM;MAAED;IAAW,CAAC,GAAGH,SAAS,CAAC5E,MAAM;IACvC4E,SAAS,CAAC1E,KAAK,GAAGL,WAAW,CAACuG,OAAO;IACrC;IACA;IACA;IACA;IACA,IAAI,CAACrB,UAAU,KAAK,CAACoB,2BAA2B,IAAI,CAAC,IAAI,CAACrD,cAAc,CAAC,EAAE;MACvE8B,SAAS,CAACxE,OAAO,CAAC,CAAC;IACvB;EACJ;EACA;EACAiF,cAAcA,CAACT,SAAS,EAAE;IACtB,MAAMK,cAAc,GAAG,IAAI,CAAClC,cAAc,CAAChC,GAAG,CAAC6D,SAAS,CAAC,IAAI,IAAI;IACjE,IAAI,CAAC7B,cAAc,CAACjB,MAAM,CAAC8C,SAAS,CAAC;IACrC;IACA,IAAI,CAAC,IAAI,CAAC7B,cAAc,CAAChB,IAAI,EAAE;MAC3B,IAAI,CAACuB,cAAc,GAAG,IAAI;IAC9B;IACA;IACA;IACA,IAAIsB,SAAS,KAAK,IAAI,CAACI,0BAA0B,EAAE;MAC/C,IAAI,CAACA,0BAA0B,GAAG,IAAI;IAC1C;IACAJ,SAAS,CAAC1E,KAAK,GAAGL,WAAW,CAACM,MAAM;IACpC,IAAI8E,cAAc,KAAK,IAAI,EAAE;MACzBL,SAAS,CAAC1F,OAAO,CAAC8C,mBAAmB,CAAC,eAAe,EAAEiD,cAAc,CAACC,eAAe,CAAC;MACtFN,SAAS,CAAC1F,OAAO,CAAC8C,mBAAmB,CAAC,kBAAkB,EAAEiD,cAAc,CAACG,kBAAkB,CAAC;IAChG;IACAR,SAAS,CAAC1F,OAAO,CAACzL,MAAM,CAAC,CAAC;EAC9B;EACA;EACAsS,YAAYA,CAAClF,KAAK,EAAE;IAChB;IACA;IACA,MAAMwF,eAAe,GAAG9Y,+BAA+B,CAACsT,KAAK,CAAC;IAC9D,MAAMyF,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,IAC9CvM,IAAI,CAACwM,GAAG,CAAC,CAAC,GAAG,IAAI,CAACD,oBAAoB,GAAGnE,wBAAwB;IACrE,IAAI,CAAC,IAAI,CAACM,OAAO,CAAC+D,cAAc,IAAI,CAACJ,eAAe,IAAI,CAACC,gBAAgB,EAAE;MACvE,IAAI,CAACxD,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACI,YAAY,CAACrC,KAAK,CAAC6F,OAAO,EAAE7F,KAAK,CAAC8F,OAAO,EAAE,IAAI,CAACjE,OAAO,CAACkE,YAAY,CAAC;IAC9E;EACJ;EACA;EACAZ,aAAaA,CAACnF,KAAK,EAAE;IACjB,IAAI,CAAC,IAAI,CAAC6B,OAAO,CAAC+D,cAAc,IAAI,CAACjZ,gCAAgC,CAACqT,KAAK,CAAC,EAAE;MAC1E;MACA;MACA;MACA,IAAI,CAAC0F,oBAAoB,GAAGvM,IAAI,CAACwM,GAAG,CAAC,CAAC;MACtC,IAAI,CAAC1D,cAAc,GAAG,IAAI;MAC1B;MACA;MACA,MAAM+D,OAAO,GAAGhG,KAAK,CAACiG,cAAc;MACpC;MACA;MACA,IAAID,OAAO,EAAE;QACT,KAAK,IAAI9N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8N,OAAO,CAAClO,MAAM,EAAEI,CAAC,EAAE,EAAE;UACrC,IAAI,CAACmK,YAAY,CAAC2D,OAAO,CAAC9N,CAAC,CAAC,CAAC2N,OAAO,EAAEG,OAAO,CAAC9N,CAAC,CAAC,CAAC4N,OAAO,EAAE,IAAI,CAACjE,OAAO,CAACkE,YAAY,CAAC;QACxF;MACJ;IACJ;EACJ;EACA;EACAX,YAAYA,CAAA,EAAG;IACX,IAAI,CAAC,IAAI,CAACnD,cAAc,EAAE;MACtB;IACJ;IACA,IAAI,CAACA,cAAc,GAAG,KAAK;IAC3B;IACA,IAAI,CAAC4C,iBAAiB,CAAC,CAAC,CAAC9O,OAAO,CAACuN,MAAM,IAAI;MACvC;MACA;MACA,MAAM4C,SAAS,GAAG5C,MAAM,CAACjE,KAAK,KAAKL,WAAW,CAACuG,OAAO,IACjDjC,MAAM,CAACnE,MAAM,CAACgH,oBAAoB,IAAI7C,MAAM,CAACjE,KAAK,KAAKL,WAAW,CAACiF,SAAU;MAClF,IAAI,CAACX,MAAM,CAACnE,MAAM,CAAC+E,UAAU,IAAIgC,SAAS,EAAE;QACxC5C,MAAM,CAAC/D,OAAO,CAAC,CAAC;MACpB;IACJ,CAAC,CAAC;EACN;EACAsF,iBAAiBA,CAAA,EAAG;IAChB,OAAO5M,KAAK,CAACmO,IAAI,CAAC,IAAI,CAAClE,cAAc,CAACmE,IAAI,CAAC,CAAC,CAAC;EACjD;EACA;EACApB,oBAAoBA,CAAA,EAAG;IACnB,MAAMqB,OAAO,GAAG,IAAI,CAACtB,eAAe;IACpC,IAAIsB,OAAO,EAAE;MACT7E,iBAAiB,CAAC1L,OAAO,CAACpE,IAAI,IAAIgQ,cAAc,CAACC,aAAa,CAACZ,aAAa,CAACrP,IAAI,EAAE2U,OAAO,EAAE,IAAI,CAAC,CAAC;MAClG,IAAI,IAAI,CAACnE,0BAA0B,EAAE;QACjCT,eAAe,CAAC3L,OAAO,CAACpE,IAAI,IAAI2U,OAAO,CAACnF,mBAAmB,CAACxP,IAAI,EAAE,IAAI,EAAE6P,4BAA4B,CAAC,CAAC;QACtG,IAAI,CAACW,0BAA0B,GAAG,KAAK;MAC3C;IACJ;EACJ;AACJ;AACA;AACA;AACA;AACA,SAASgB,wBAAwBA,CAACb,CAAC,EAAEC,CAAC,EAAEgE,IAAI,EAAE;EAC1C,MAAMC,KAAK,GAAGC,IAAI,CAAC/O,GAAG,CAAC+O,IAAI,CAACC,GAAG,CAACpE,CAAC,GAAGiE,IAAI,CAACzD,IAAI,CAAC,EAAE2D,IAAI,CAACC,GAAG,CAACpE,CAAC,GAAGiE,IAAI,CAACI,KAAK,CAAC,CAAC;EACzE,MAAMC,KAAK,GAAGH,IAAI,CAAC/O,GAAG,CAAC+O,IAAI,CAACC,GAAG,CAACnE,CAAC,GAAGgE,IAAI,CAACvD,GAAG,CAAC,EAAEyD,IAAI,CAACC,GAAG,CAACnE,CAAC,GAAGgE,IAAI,CAACM,MAAM,CAAC,CAAC;EACzE,OAAOJ,IAAI,CAACK,IAAI,CAACN,KAAK,GAAGA,KAAK,GAAGI,KAAK,GAAGA,KAAK,CAAC;AACnD;;AAEA;AACA,MAAMG,yBAAyB,gBAAG,IAAIzb,cAAc,CAAC,2BAA2B,CAAC;AAAC,IAC5E0b,SAAS;EAAf,MAAMA,SAAS,CAAC;IACZ;AACJ;AACA;AACA;IACI,IAAItY,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACsE,SAAS;IACzB;IACA,IAAItE,QAAQA,CAACuE,KAAK,EAAE;MAChB,IAAIA,KAAK,EAAE;QACP,IAAI,CAAC6R,uBAAuB,CAAC,CAAC;MAClC;MACA,IAAI,CAAC9R,SAAS,GAAGC,KAAK;MACtB,IAAI,CAACgU,4BAA4B,CAAC,CAAC;IACvC;IACA;AACJ;AACA;AACA;IACI,IAAIX,OAAOA,CAAA,EAAG;MACV,OAAO,IAAI,CAACY,QAAQ,IAAI,IAAI,CAAC1T,WAAW,CAACC,aAAa;IAC1D;IACA,IAAI6S,OAAOA,CAACA,OAAO,EAAE;MACjB,IAAI,CAACY,QAAQ,GAAGZ,OAAO;MACvB,IAAI,CAACW,4BAA4B,CAAC,CAAC;IACvC;IACA5W,WAAWA,CAACmD,WAAW,EAAEgN,MAAM,EAAE5P,QAAQ,EAAEuW,aAAa,EAAEC,cAAc,EAAE;MACtE,IAAI,CAAC5T,WAAW,GAAGA,WAAW;MAC9B,IAAI,CAAC4T,cAAc,GAAGA,cAAc;MACpC;AACR;AACA;AACA;AACA;MACQ,IAAI,CAAClE,MAAM,GAAG,CAAC;MACf,IAAI,CAAClQ,SAAS,GAAG,KAAK;MACtB;MACA,IAAI,CAACuC,cAAc,GAAG,KAAK;MAC3B,IAAI,CAAC8R,cAAc,GAAGF,aAAa,IAAI,CAAC,CAAC;MACzC,IAAI,CAACG,eAAe,GAAG,IAAI3F,cAAc,CAAC,IAAI,EAAEnB,MAAM,EAAEhN,WAAW,EAAE5C,QAAQ,CAAC;IAClF;IACA2W,QAAQA,CAAA,EAAG;MACP,IAAI,CAAChS,cAAc,GAAG,IAAI;MAC1B,IAAI,CAAC0R,4BAA4B,CAAC,CAAC;IACvC;IACAO,WAAWA,CAAA,EAAG;MACV,IAAI,CAACF,eAAe,CAACrC,oBAAoB,CAAC,CAAC;IAC/C;IACA;IACAL,UAAUA,CAAA,EAAG;MACT,IAAI,CAAC0C,eAAe,CAAC1C,UAAU,CAAC,CAAC;IACrC;IACA;IACAE,uBAAuBA,CAAA,EAAG;MACtB,IAAI,CAACwC,eAAe,CAACxC,uBAAuB,CAAC,CAAC;IAClD;IACA;AACJ;AACA;AACA;IACI,IAAIiB,YAAYA,CAAA,EAAG;MACf,OAAO;QACHlD,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBK,MAAM,EAAE,IAAI,CAACA,MAAM;QACnB7P,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBuP,SAAS,EAAE;UACP,GAAG,IAAI,CAACyE,cAAc,CAACzE,SAAS;UAChC,IAAI,IAAI,CAACwE,cAAc,KAAK,gBAAgB,GAAG;YAAE/F,aAAa,EAAE,CAAC;YAAEC,YAAY,EAAE;UAAE,CAAC,GAAG,CAAC,CAAC,CAAC;UAC1F,GAAG,IAAI,CAACsB;QACZ,CAAC;QACDuD,oBAAoB,EAAE,IAAI,CAACkB,cAAc,CAAClB;MAC9C,CAAC;IACL;IACA;AACJ;AACA;AACA;IACI,IAAIP,cAAcA,CAAA,EAAG;MACjB,OAAO,IAAI,CAAClX,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC2Y,cAAc,CAAC3Y,QAAQ;IAC1D;IACA;IACAuY,4BAA4BA,CAAA,EAAG;MAC3B,IAAI,CAAC,IAAI,CAACvY,QAAQ,IAAI,IAAI,CAAC6G,cAAc,EAAE;QACvC,IAAI,CAAC+R,eAAe,CAACvC,kBAAkB,CAAC,IAAI,CAACuB,OAAO,CAAC;MACzD;IACJ;IACA;IACAmB,MAAMA,CAACC,SAAS,EAAEnF,CAAC,GAAG,CAAC,EAAEpD,MAAM,EAAE;MAC7B,IAAI,OAAOuI,SAAS,KAAK,QAAQ,EAAE;QAC/B,OAAO,IAAI,CAACJ,eAAe,CAACjF,YAAY,CAACqF,SAAS,EAAEnF,CAAC,EAAE;UAAE,GAAG,IAAI,CAACwD,YAAY;UAAE,GAAG5G;QAAO,CAAC,CAAC;MAC/F,CAAC,MACI;QACD,OAAO,IAAI,CAACmI,eAAe,CAACjF,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE;UAAE,GAAG,IAAI,CAAC0D,YAAY;UAAE,GAAG2B;QAAU,CAAC,CAAC;MAC1F;IACJ;IACA;MAAS,IAAI,CAACtW,IAAI,YAAAuW,kBAAArW,CAAA;QAAA,YAAAA,CAAA,IAAwF0V,SAAS,EA/qCnB5b,EAAE,CAAAwc,iBAAA,CA+qCmCxc,EAAE,CAACoB,UAAU,GA/qClDpB,EAAE,CAAAwc,iBAAA,CA+qC6Dxc,EAAE,CAACmB,MAAM,GA/qCxEnB,EAAE,CAAAwc,iBAAA,CA+qCmF5a,IAAI,CAACC,QAAQ,GA/qClG7B,EAAE,CAAAwc,iBAAA,CA+qC6Gb,yBAAyB,MA/qCxI3b,EAAE,CAAAwc,iBAAA,CA+qCmK9b,qBAAqB;MAAA,CAA4D;IAAE;IACxV;MAAS,IAAI,CAACgS,IAAI,kBAhrC8E1S,EAAE,CAAA2S,iBAAA;QAAApM,IAAA,EAgrCJqV,SAAS;QAAAhJ,SAAA;QAAAC,SAAA;QAAA4J,QAAA;QAAAC,YAAA,WAAAC,uBAAA3Z,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAhrCPhD,EAAE,CAAA4c,WAAA,yBAAA3Z,GAAA,CAAA4Z,SAgrCI,CAAC;UAAA;QAAA;QAAAC,MAAA;UAAA7U,KAAA,GAhrCPjI,EAAE,CAAA+c,YAAA,CAAAC,IAAA;UAAAH,SAAA,GAAF7c,EAAE,CAAA+c,YAAA,CAAAC,IAAA;UAAAvF,QAAA,GAAFzX,EAAE,CAAA+c,YAAA,CAAAC,IAAA;UAAAlF,MAAA,GAAF9X,EAAE,CAAA+c,YAAA,CAAAC,IAAA;UAAAxF,SAAA,GAAFxX,EAAE,CAAA+c,YAAA,CAAAC,IAAA;UAAA1Z,QAAA,GAAFtD,EAAE,CAAA+c,YAAA,CAAAC,IAAA;UAAA9B,OAAA,GAAFlb,EAAE,CAAA+c,YAAA,CAAAC,IAAA;QAAA;QAAAC,QAAA;QAAAnK,UAAA;MAAA,EAgrCwgB;IAAE;EAChnB;EAAC,OAjGK8I,SAAS;AAAA;AAkGf;EAAA,QAAArW,SAAA,oBAAAA,SAAA;AAAA;AA0CoB,IAEd2X,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClB;MAAS,IAAI,CAAClX,IAAI,YAAAmX,wBAAAjX,CAAA;QAAA,YAAAA,CAAA,IAAwFgX,eAAe;MAAA,CAAkD;IAAE;IAC7K;MAAS,IAAI,CAAC7W,IAAI,kBAhuC8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EAguCS2W;MAAe,EAAiF;IAAE;IAC7M;MAAS,IAAI,CAAC1W,IAAI,kBAjuC8ExG,EAAE,CAAAyG,gBAAA;QAAAC,OAAA,GAiuCoC1B,eAAe,EAAEA,eAAe;MAAA,EAAI;IAAE;EAChL;EAAC,OAJKkY,eAAe;AAAA;AAKrB;EAAA,QAAA3X,SAAA,oBAAAA,SAAA;AAAA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,IAaM6X,iBAAiB;EAAvB,MAAMA,iBAAiB,CAAC;IACpBnY,WAAWA,CAAC+W,cAAc,EAAE;MACxB,IAAI,CAACA,cAAc,GAAGA,cAAc;MACpC;MACA,IAAI,CAAC/H,KAAK,GAAG,WAAW;MACxB;MACA,IAAI,CAAC3Q,QAAQ,GAAG,KAAK;MACrB;AACR;AACA;AACA;MACQ,IAAI,CAAC+Z,UAAU,GAAG,MAAM;IAC5B;IACA;MAAS,IAAI,CAACrX,IAAI,YAAAsX,0BAAApX,CAAA;QAAA,YAAAA,CAAA,IAAwFkX,iBAAiB,EArwC3Bpd,EAAE,CAAAwc,iBAAA,CAqwC2C9b,qBAAqB;MAAA,CAA4D;IAAE;IAChO;MAAS,IAAI,CAAC6c,IAAI,kBAtwC8Evd,EAAE,CAAAwd,iBAAA;QAAAjX,IAAA,EAswCJ6W,iBAAiB;QAAAxK,SAAA;QAAAC,SAAA;QAAA4J,QAAA;QAAAC,YAAA,WAAAe,+BAAAza,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAtwCfhD,EAAE,CAAA4c,WAAA,sCAAA3Z,GAAA,CAAAgR,KAAA,KAswCM,eAAM,CAAC,gCAAAhR,GAAA,CAAAgR,KAAA,KAAP,SAAM,CAAC,iCAAAhR,GAAA,CAAAK,QAAD,CAAC,gCAAAL,GAAA,CAAAoa,UAAA,KAAF,SAAC,CAAC,6BAAApa,GAAA,CAAAoa,UAAA,KAAF,MAAC,CAAC,4BAAApa,GAAA,CAAA+Y,cAAA,KAAE,gBAAH,CAAC;UAAA;QAAA;QAAAc,MAAA;UAAA7I,KAAA;UAAA3Q,QAAA;UAAA+Z,UAAA;QAAA;QAAAvK,UAAA;QAAA4K,QAAA,GAtwCf1d,EAAE,CAAA2d,mBAAA;QAAAC,KAAA;QAAAC,IAAA;QAAAC,QAAA,WAAAC,2BAAA/a,EAAA,EAAAC,GAAA;QAAA+a,MAAA;QAAAC,aAAA;QAAAC,eAAA;MAAA,EAswCqsH;IAAE;EAC7yH;EAAC,OAfKd,iBAAiB;AAAA;AAgBvB;EAAA,QAAA7X,SAAA,oBAAAA,SAAA;AAAA;AAsBoB,IAEd4Y,uBAAuB;EAA7B,MAAMA,uBAAuB,CAAC;IAC1B;MAAS,IAAI,CAACnY,IAAI,YAAAoY,gCAAAlY,CAAA;QAAA,YAAAA,CAAA,IAAwFiY,uBAAuB;MAAA,CAAkD;IAAE;IACrL;MAAS,IAAI,CAAC9X,IAAI,kBAlyC8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EAkyCS4X;MAAuB,EAAgF;IAAE;IACpN;MAAS,IAAI,CAAC3X,IAAI,kBAnyC8ExG,EAAE,CAAAyG,gBAAA;QAAAC,OAAA,GAmyC4C1B,eAAe;MAAA,EAAI;IAAE;EACvK;EAAC,OAJKmZ,uBAAuB;AAAA;AAK7B;EAAA,QAAA5Y,SAAA,oBAAAA,SAAA;AAAA;;AAQA;AACA;AACA;AACA,MAAM8Y,2BAA2B,gBAAG,IAAIne,cAAc,CAAC,6BAA6B,CAAC;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIoe,wBAAwB,GAAG,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,gBAAG,IAAIre,cAAc,CAAC,aAAa,CAAC;AACtD;AACA;AACA;AAFA,IAGMse,WAAW;EAAjB,MAAMA,WAAW,CAAC;IACdvZ,WAAWA,CAACqE,MAAM,EAAE;MAChB;MACA,IAAI,CAAChG,QAAQ,GAAG,KAAK;MACrB;MACA,IAAI,CAACmb,QAAQ,GAAG,sBAAsBH,wBAAwB,EAAE,EAAE;MAClE,IAAI,CAACI,MAAM,GAAGpV,MAAM,EAAEqV,WAAW,IAAI,KAAK;IAC9C;IACA;MAAS,IAAI,CAAC3Y,IAAI,YAAA4Y,oBAAA1Y,CAAA;QAAA,YAAAA,CAAA,IAAwFsY,WAAW,EAx1CrBxe,EAAE,CAAAwc,iBAAA,CAw1CqC6B,2BAA2B;MAAA,CAA4D;IAAE;IAChO;MAAS,IAAI,CAACd,IAAI,kBAz1C8Evd,EAAE,CAAAwd,iBAAA;QAAAjX,IAAA,EAy1CJiY,WAAW;QAAA5L,SAAA;QAAAC,SAAA;QAAA4J,QAAA;QAAAC,YAAA,WAAAmC,yBAAA7b,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAz1CThD,EAAE,CAAA8e,WAAA,SAAA7b,GAAA,CAAAyb,MAAA,GAy1CK,IAAI,GAAG,OAAO,mBAAAzb,GAAA,CAAAyb,MAAA,GAAd,IAAI,GAAGzb,GAAA,CAAAK,QAAA,CAAAyb,QAAA,CAAkB,CAAC,qBAAA9b,GAAA,CAAAyb,MAAA,GAA1B,IAAI,GAAAzb,GAAA,CAAAwb,QAAA;UAAA;QAAA;QAAA3B,MAAA;UAAA9Y,KAAA;UAAAV,QAAA,GAz1CXtD,EAAE,CAAA+c,YAAA,CAAAiC,0BAAA,0BAy1CoHje,gBAAgB;QAAA;QAAAkc,QAAA;QAAAnK,UAAA;QAAA4K,QAAA,GAz1CtI1d,EAAE,CAAAif,kBAAA,CAy1C6W,CAAC;UAAExN,OAAO,EAAE8M,YAAY;UAAEW,WAAW,EAAEV;QAAY,CAAC,CAAC,GAz1Cpaxe,EAAE,CAAAmf,wBAAA,EAAFnf,EAAE,CAAA2d,mBAAA;QAAAyB,kBAAA,EAAAzc,GAAA;QAAAib,KAAA;QAAAC,IAAA;QAAAwB,MAAA;QAAAvB,QAAA,WAAAwB,qBAAAtc,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAAFhD,EAAE,CAAAuf,eAAA,CAAA7c,GAAA;YAAF1C,EAAE,CAAA0D,cAAA,aAy1C+lB,CAAC,aAA+C,CAAC;YAz1ClpB1D,EAAE,CAAA2D,MAAA,EAy1C2pB,CAAC;YAz1C9pB3D,EAAE,CAAAwf,YAAA,EAy1CorB,CAAC;YAz1CvrBxf,EAAE,CAAA4D,YAAA,CAy1C2rB,CAAC,CAAQ,CAAC;YAz1CvsB5D,EAAE,CAAAwf,YAAA,KAy1CqwB,CAAC;UAAA;UAAA,IAAAxc,EAAA;YAz1CxwBhD,EAAE,CAAA4c,WAAA,4BAAA3Z,GAAA,CAAAK,QAy1CykB,CAAC;YAz1C5kBtD,EAAE,CAAAqD,UAAA,OAAAJ,GAAA,CAAAwb,QAy1C8lB,CAAC;YAz1CjmBze,EAAE,CAAA6D,SAAA,EAy1C2pB,CAAC;YAz1C9pB7D,EAAE,CAAA8D,kBAAA,KAAAb,GAAA,CAAAe,KAAA,KAy1C2pB,CAAC;UAAA;QAAA;QAAAga,MAAA;QAAAC,aAAA;QAAAC,eAAA;MAAA,EAAsnC;IAAE;EAC13D;EAAC,OAVKM,WAAW;AAAA;AAWjB;EAAA,QAAAjZ,SAAA,oBAAAA,SAAA;AAAA;;AAoBA;AACA;AACA;AACA;AACA,IAAIka,gBAAgB,GAAG,CAAC;AACxB;AACA,MAAMC,wBAAwB,CAAC;EAC3Bza,WAAWA,CACX;EACA0a,MAAM,EACN;EACAC,WAAW,GAAG,KAAK,EAAE;IACjB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA;AACA;AACA;AAFA,IAGMC,SAAS;EAAf,MAAMA,SAAS,CAAC;IACZ;IACA,IAAIC,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACC,OAAO,IAAI,IAAI,CAACA,OAAO,CAACD,QAAQ;IAChD;IACA;IACA,IAAIvc,QAAQA,CAAA,EAAG;MACX,OAAO,IAAI,CAACyc,SAAS;IACzB;IACA;IACA,IAAI1c,QAAQA,CAAA,EAAG;MACX,OAAQ,IAAI,CAACS,KAAK,IAAI,IAAI,CAACA,KAAK,CAACT,QAAQ,IAAK,IAAI,CAACsE,SAAS;IAChE;IACA,IAAItE,QAAQA,CAACuE,KAAK,EAAE;MAChB,IAAI,CAACD,SAAS,GAAGC,KAAK;IAC1B;IACA;IACA,IAAIU,aAAaA,CAAA,EAAG;MAChB,OAAO,CAAC,EAAE,IAAI,CAACwX,OAAO,IAAI,IAAI,CAACA,OAAO,CAACxX,aAAa,CAAC;IACzD;IACA;IACA,IAAI0X,4BAA4BA,CAAA,EAAG;MAC/B,OAAO,CAAC,EAAE,IAAI,CAACF,OAAO,IAAI,IAAI,CAACA,OAAO,CAACE,4BAA4B,CAAC;IACxE;IACAhb,WAAWA,CAACib,QAAQ,EAAEC,kBAAkB,EAAEJ,OAAO,EAAEhc,KAAK,EAAE;MACtD,IAAI,CAACmc,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;MAC5C,IAAI,CAACJ,OAAO,GAAGA,OAAO;MACtB,IAAI,CAAChc,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACic,SAAS,GAAG,KAAK;MACtB,IAAI,CAACI,OAAO,GAAG,KAAK;MACpB,IAAI,CAACxY,SAAS,GAAG,KAAK;MACtB,IAAI,CAACyY,oBAAoB,GAAG,EAAE;MAC9B;MACA,IAAI,CAACC,EAAE,GAAG,cAAcb,gBAAgB,EAAE,EAAE;MAC5C;MACA;MACA,IAAI,CAACc,iBAAiB,GAAG,IAAIvf,YAAY,CAAC,CAAC;MAC3C;MACA,IAAI,CAACkI,aAAa,GAAG,IAAI7G,OAAO,CAAC,CAAC;IACtC;IACA;AACJ;AACA;AACA;AACA;AACA;IACI,IAAIme,MAAMA,CAAA,EAAG;MACT,OAAO,IAAI,CAACJ,OAAO;IACvB;IACA;AACJ;AACA;AACA;IACI,IAAIK,SAASA,CAAA,EAAG;MACZ;MACA,OAAO,CAAC,IAAI,CAACC,KAAK,EAAErY,aAAa,CAACsY,WAAW,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC;IAC/D;IACA;IACAC,MAAMA,CAACC,SAAS,GAAG,IAAI,EAAE;MACrB,IAAI,CAAC,IAAI,CAACd,SAAS,EAAE;QACjB,IAAI,CAACA,SAAS,GAAG,IAAI;QACrB,IAAI,CAACG,kBAAkB,CAACY,YAAY,CAAC,CAAC;QACtC,IAAID,SAAS,EAAE;UACX,IAAI,CAACE,yBAAyB,CAAC,CAAC;QACpC;MACJ;IACJ;IACA;IACAC,QAAQA,CAACH,SAAS,GAAG,IAAI,EAAE;MACvB,IAAI,IAAI,CAACd,SAAS,EAAE;QAChB,IAAI,CAACA,SAAS,GAAG,KAAK;QACtB,IAAI,CAACG,kBAAkB,CAACY,YAAY,CAAC,CAAC;QACtC,IAAID,SAAS,EAAE;UACX,IAAI,CAACE,yBAAyB,CAAC,CAAC;QACpC;MACJ;IACJ;IACA;IACAE,KAAKA,CAACC,OAAO,EAAEC,OAAO,EAAE;MACpB;MACA;MACA,MAAMnO,OAAO,GAAG,IAAI,CAACoO,eAAe,CAAC,CAAC;MACtC,IAAI,OAAOpO,OAAO,CAACiO,KAAK,KAAK,UAAU,EAAE;QACrCjO,OAAO,CAACiO,KAAK,CAACE,OAAO,CAAC;MAC1B;IACJ;IACA;AACJ;AACA;AACA;AACA;IACIE,eAAeA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAAClB,OAAO,EAAE;QACf,IAAI,CAACA,OAAO,GAAG,IAAI;QACnB,IAAI,CAACD,kBAAkB,CAACY,YAAY,CAAC,CAAC;MAC1C;IACJ;IACA;AACJ;AACA;AACA;AACA;IACIQ,iBAAiBA,CAAA,EAAG;MAChB,IAAI,IAAI,CAACnB,OAAO,EAAE;QACd,IAAI,CAACA,OAAO,GAAG,KAAK;QACpB,IAAI,CAACD,kBAAkB,CAACY,YAAY,CAAC,CAAC;MAC1C;IACJ;IACA;IACAS,QAAQA,CAAA,EAAG;MACP,OAAO,IAAI,CAACf,SAAS;IACzB;IACA;IACAgB,cAAcA,CAAC7M,KAAK,EAAE;MAClB,IAAI,CAACA,KAAK,CAAC8M,OAAO,KAAKnf,KAAK,IAAIqS,KAAK,CAAC8M,OAAO,KAAKlf,KAAK,KAAK,CAACC,cAAc,CAACmS,KAAK,CAAC,EAAE;QAChF,IAAI,CAAC+M,qBAAqB,CAAC,CAAC;QAC5B;QACA/M,KAAK,CAACgN,cAAc,CAAC,CAAC;MAC1B;IACJ;IACA;AACJ;AACA;AACA;IACID,qBAAqBA,CAAA,EAAG;MACpB,IAAI,CAAC,IAAI,CAACre,QAAQ,EAAE;QAChB,IAAI,CAAC0c,SAAS,GAAG,IAAI,CAACF,QAAQ,GAAG,CAAC,IAAI,CAACE,SAAS,GAAG,IAAI;QACvD,IAAI,CAACG,kBAAkB,CAACY,YAAY,CAAC,CAAC;QACtC,IAAI,CAACC,yBAAyB,CAAC,IAAI,CAAC;MACxC;IACJ;IACA;IACA;IACA;IACA;IACAa,YAAYA,CAAA,EAAG;MACX,OAAO,IAAI,CAACve,QAAQ,GAAG,IAAI,GAAG,GAAG;IACrC;IACA;IACA+d,eAAeA,CAAA,EAAG;MACd,OAAO,IAAI,CAACnB,QAAQ,CAAC7X,aAAa;IACtC;IACAyZ,kBAAkBA,CAAA,EAAG;MACjB;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAAC9B,SAAS,EAAE;QAChB,MAAMS,SAAS,GAAG,IAAI,CAACA,SAAS;QAChC,IAAIA,SAAS,KAAK,IAAI,CAACJ,oBAAoB,EAAE;UACzC,IAAI,IAAI,CAACA,oBAAoB,EAAE;YAC3B,IAAI,CAACnX,aAAa,CAACS,IAAI,CAAC,CAAC;UAC7B;UACA,IAAI,CAAC0W,oBAAoB,GAAGI,SAAS;QACzC;MACJ;IACJ;IACArE,WAAWA,CAAA,EAAG;MACV,IAAI,CAAClT,aAAa,CAAC0B,QAAQ,CAAC,CAAC;IACjC;IACA;IACAoW,yBAAyBA,CAACpB,WAAW,GAAG,KAAK,EAAE;MAC3C,IAAI,CAACW,iBAAiB,CAACwB,IAAI,CAAC,IAAIrC,wBAAwB,CAAC,IAAI,EAAEE,WAAW,CAAC,CAAC;IAChF;IACA;MAAS,IAAI,CAAC5Z,IAAI,YAAAgc,kBAAA9b,CAAA;QAAA,YAAAA,CAAA,IAAwF2Z,SAAS,EAxiDnB7f,EAAE,CAAAwc,iBAAA,CAwiDmCxc,EAAE,CAACoB,UAAU,GAxiDlDpB,EAAE,CAAAwc,iBAAA,CAwiD6Dxc,EAAE,CAACiiB,iBAAiB,GAxiDnFjiB,EAAE,CAAAwc,iBAAA,CAwiD8F6B,2BAA2B,MAxiD3Hre,EAAE,CAAAwc,iBAAA,CAwiDsJ+B,YAAY;MAAA,CAA4D;IAAE;IAClU;MAAS,IAAI,CAAChB,IAAI,kBAziD8Evd,EAAE,CAAAwd,iBAAA;QAAAjX,IAAA,EAyiDJsZ,SAAS;QAAAjN,SAAA;QAAAsP,SAAA,WAAAC,gBAAAnf,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAziDPhD,EAAE,CAAAoiB,WAAA,CAAAxf,GAAA;UAAA;UAAA,IAAAI,EAAA;YAAA,IAAAqf,EAAA;YAAFriB,EAAE,CAAAsiB,cAAA,CAAAD,EAAA,GAAFriB,EAAE,CAAAuiB,WAAA,QAAAtf,GAAA,CAAAyd,KAAA,GAAA2B,EAAA,CAAA1W,KAAA;UAAA;QAAA;QAAAkH,SAAA,WAyiDkO,QAAQ;QAAA4J,QAAA;QAAAC,YAAA,WAAA8F,uBAAAxf,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAziD5OhD,EAAE,CAAAyiB,UAAA,mBAAAC,mCAAA;cAAA,OAyiDJzf,GAAA,CAAA0e,qBAAA,CAAsB,CAAC;YAAA,CAAf,CAAC,qBAAAgB,qCAAAC,MAAA;cAAA,OAAT3f,GAAA,CAAAwe,cAAA,CAAAmB,MAAqB,CAAC;YAAA,CAAd,CAAC;UAAA;UAAA,IAAA5f,EAAA;YAziDPhD,EAAE,CAAA6iB,cAAA,OAAA5f,GAAA,CAAAqd,EAyiDI,CAAC;YAziDPtgB,EAAE,CAAA8e,WAAA,kBAAA7b,GAAA,CAAAM,QAAA,mBAyiDJN,GAAA,CAAAK,QAAA,CAAAyb,QAAA,CAAkB,CAAC;YAziDjB/e,EAAE,CAAA4c,WAAA,4BAAA3Z,GAAA,CAAAM,QAyiDI,CAAC,4BAAAN,GAAA,CAAA6c,QAAD,CAAC,0BAAA7c,GAAA,CAAAud,MAAD,CAAC,4BAAAvd,GAAA,CAAAK,QAAD,CAAC;UAAA;QAAA;QAAAwZ,MAAA;UAAAjV,KAAA;UAAAyY,EAAA;UAAAhd,QAAA,GAziDPtD,EAAE,CAAA+c,YAAA,CAAAiC,0BAAA,0BAyiD0Hje,gBAAgB;QAAA;QAAA+hB,OAAA;UAAAvC,iBAAA;QAAA;QAAAtD,QAAA;QAAAnK,UAAA;QAAA4K,QAAA,GAziD5I1d,EAAE,CAAAmf,wBAAA,EAAFnf,EAAE,CAAA2d,mBAAA;QAAAyB,kBAAA,EAAAtc,GAAA;QAAA8a,KAAA;QAAAC,IAAA;QAAAwB,MAAA;QAAAvB,QAAA,WAAAiF,mBAAA/f,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAAFhD,EAAE,CAAAuf,eAAA,CAAA1c,GAAA;YAAF7C,EAAE,CAAAgjB,UAAA,IAAAjgB,gCAAA,gCAyiDwsC,CAAC;YAziD3sC/C,EAAE,CAAAwf,YAAA,EAyiDs9C,CAAC;YAziDz9Cxf,EAAE,CAAA0D,cAAA,gBAyiD4gD,CAAC;YAziD/gD1D,EAAE,CAAAwf,YAAA,KAyiDqiD,CAAC;YAziDxiDxf,EAAE,CAAA4D,YAAA,CAyiD4iD,CAAC;YAziD/iD5D,EAAE,CAAAgjB,UAAA,IAAAxf,gCAAA,gCAyiD0qD,CAAC,IAAAC,gCAAA,iBAA6U,CAAC;YAziD3/DzD,EAAE,CAAAkD,SAAA,YAyiDywE,CAAC;UAAA;UAAA,IAAAF,EAAA;YAziD5wEhD,EAAE,CAAAijB,aAAA,IAAAhgB,GAAA,CAAA6c,QAAA,SAyiDq6C,CAAC;YAziDx6C9f,EAAE,CAAA6D,SAAA,EAyiD04D,CAAC;YAziD74D7D,EAAE,CAAAijB,aAAA,KAAAhgB,GAAA,CAAA6c,QAAA,IAAA7c,GAAA,CAAAM,QAAA,KAAAN,GAAA,CAAAgd,4BAAA,SAyiD04D,CAAC;YAziD74DjgB,EAAE,CAAA6D,SAAA,CAyiD+jE,CAAC;YAziDlkE7D,EAAE,CAAAijB,aAAA,IAAAhgB,GAAA,CAAAc,KAAA,IAAAd,GAAA,CAAAc,KAAA,CAAA2a,MAAA,SAyiD+jE,CAAC;YAziDlkE1e,EAAE,CAAA6D,SAAA,CAyiD8sE,CAAC;YAziDjtE7D,EAAE,CAAAqD,UAAA,qBAAAJ,GAAA,CAAAoe,eAAA,EAyiD8sE,CAAC,sBAAApe,GAAA,CAAAK,QAAA,IAAAL,GAAA,CAAAsF,aAAiD,CAAC;UAAA;QAAA;QAAA2a,YAAA,GAAqvG9F,iBAAiB,EAA6GxB,SAAS;QAAAoC,MAAA;QAAAC,aAAA;QAAAC,eAAA;MAAA,EAA6T;IAAE;EACliM;EAAC,OAxKK2B,SAAS;AAAA;AAyKf;EAAA,QAAAta,SAAA,oBAAAA,SAAA;AAAA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4d,6BAA6BA,CAACC,WAAW,EAAEhC,OAAO,EAAEiC,YAAY,EAAE;EACvE,IAAIA,YAAY,CAAC3W,MAAM,EAAE;IACrB,IAAI4W,YAAY,GAAGlC,OAAO,CAACmC,OAAO,CAAC,CAAC;IACpC,IAAIC,MAAM,GAAGH,YAAY,CAACE,OAAO,CAAC,CAAC;IACnC,IAAIE,YAAY,GAAG,CAAC;IACpB,KAAK,IAAI3W,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsW,WAAW,GAAG,CAAC,EAAEtW,CAAC,EAAE,EAAE;MACtC,IAAIwW,YAAY,CAACxW,CAAC,CAAC,CAAC/I,KAAK,IAAIuf,YAAY,CAACxW,CAAC,CAAC,CAAC/I,KAAK,KAAKyf,MAAM,CAACC,YAAY,CAAC,EAAE;QACzEA,YAAY,EAAE;MAClB;IACJ;IACA,OAAOA,YAAY;EACvB;EACA,OAAO,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,YAAY,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,WAAW,EAAE;EAC9F,IAAIH,YAAY,GAAGE,qBAAqB,EAAE;IACtC,OAAOF,YAAY;EACvB;EACA,IAAIA,YAAY,GAAGC,YAAY,GAAGC,qBAAqB,GAAGC,WAAW,EAAE;IACnE,OAAOzI,IAAI,CAAC/O,GAAG,CAAC,CAAC,EAAEqX,YAAY,GAAGG,WAAW,GAAGF,YAAY,CAAC;EACjE;EACA,OAAOC,qBAAqB;AAChC;AAAC,IAEKE,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClB;MAAS,IAAI,CAAC/d,IAAI,YAAAge,wBAAA9d,CAAA;QAAA,YAAAA,CAAA,IAAwF6d,eAAe;MAAA,CAAkD;IAAE;IAC7K;MAAS,IAAI,CAAC1d,IAAI,kBAnoD8ErG,EAAE,CAAAsG,gBAAA;QAAAC,IAAA,EAmoDSwd;MAAe,EAAoI;IAAE;IAChQ;MAAS,IAAI,CAACvd,IAAI,kBApoD8ExG,EAAE,CAAAyG,gBAAA;QAAAC,OAAA,GAooDoCwW,eAAe,EAAElY,eAAe,EAAEmZ,uBAAuB;MAAA,EAAI;IAAE;EACzM;EAAC,OAJK4F,eAAe;AAAA;AAKrB;EAAA,QAAAxe,SAAA,oBAAAA,SAAA;AAAA;;AAQA;AACA,MAAM0e,oBAAoB,GAAG;EAAE1P,OAAO,EAAE;AAAK,CAAC;AAC9C;AACA,MAAM2P,uBAAuB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC;AAC9E;AACA,MAAMC,sBAAsB,GAAG,iCAAiC;AAChE;AACA,MAAMC,kBAAkB,GAAG,8BAA8B;AACzD;AACA,MAAMC,iBAAiB,GAAG,4BAA4B;AACtD;AACA,MAAMC,iBAAiB,GAAG,4BAA4B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAQMC,eAAe;EAArB,MAAMA,eAAe,CAAC;IAClBtf,WAAWA,CAAA,EAAG;MACV,IAAI,CAACG,SAAS,GAAGjF,MAAM,CAACwB,QAAQ,EAAE;QAAE8D,QAAQ,EAAE;MAAK,CAAC,CAAC;MACrD,IAAI,CAACuW,cAAc,GAAG7b,MAAM,CAACO,qBAAqB,EAAE;QAAE+E,QAAQ,EAAE;MAAK,CAAC,CAAC;MACvE,IAAI,CAAC+e,oBAAoB,GAAGrkB,MAAM,CAACwb,yBAAyB,EAAE;QAAElW,QAAQ,EAAE;MAAK,CAAC,CAAC;MACjF,IAAI,CAACmR,SAAS,GAAGzW,MAAM,CAAC0B,QAAQ,CAAC;MACjC,IAAI,CAAC6U,OAAO,GAAGvW,MAAM,CAACgB,MAAM,CAAC;MAC7B,IAAI,CAACsjB,MAAM,GAAG,IAAI/P,GAAG,CAAC,CAAC;MACvB;MACA,IAAI,CAACgQ,cAAc,GAAI9P,KAAK,IAAK;QAC7B,IAAI,EAAEA,KAAK,CAACC,MAAM,YAAY8P,WAAW,CAAC,EAAE;UACxC;QACJ;QACA,MAAMC,WAAW,GAAGhQ,KAAK,CAACC,MAAM;QAChC;QACA,MAAM5B,OAAO,GAAG2R,WAAW,CAACC,OAAO,CAAC,IAAIV,sBAAsB,GAAG,CAAC;QAClE,IAAIlR,OAAO,EAAE;UACT,IAAI,CAAC6R,aAAa,CAAC7R,OAAO,CAAC;QAC/B;MACJ,CAAC;MACD,IAAI,CAACyD,OAAO,CAACjB,iBAAiB,CAAC,MAAM;QACjC,KAAK,MAAMb,KAAK,IAAIsP,uBAAuB,EAAE;UACzC,IAAI,CAAC9e,SAAS,EAAEuQ,gBAAgB,CAACf,KAAK,EAAE,IAAI,CAAC8P,cAAc,EAAET,oBAAoB,CAAC;QACtF;MACJ,CAAC,CAAC;IACN;IACA7H,WAAWA,CAAA,EAAG;MACV,MAAM2I,KAAK,GAAG,IAAI,CAACN,MAAM,CAACxJ,IAAI,CAAC,CAAC;MAChC,KAAK,MAAM+J,IAAI,IAAID,KAAK,EAAE;QACtB,IAAI,CAACE,aAAa,CAACD,IAAI,CAAC;MAC5B;MACA,KAAK,MAAMpQ,KAAK,IAAIsP,uBAAuB,EAAE;QACzC,IAAI,CAAC9e,SAAS,EAAE2Q,mBAAmB,CAACnB,KAAK,EAAE,IAAI,CAAC8P,cAAc,EAAET,oBAAoB,CAAC;MACzF;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;IACIiB,eAAeA,CAACF,IAAI,EAAEjR,MAAM,EAAE;MAC1B;MACAiR,IAAI,CAACG,YAAY,CAAChB,sBAAsB,EAAE,EAAE,CAAC;MAC7C;MACA,IAAIpQ,MAAM,CAACR,SAAS,IAAI,CAACyR,IAAI,CAACI,YAAY,CAAChB,kBAAkB,CAAC,EAAE;QAC5DY,IAAI,CAACG,YAAY,CAACf,kBAAkB,EAAErQ,MAAM,CAACR,SAAS,IAAI,EAAE,CAAC;MACjE;MACA;MACA,IAAIQ,MAAM,CAAC0D,QAAQ,EAAE;QACjBuN,IAAI,CAACG,YAAY,CAACd,iBAAiB,EAAE,EAAE,CAAC;MAC5C;MACA,IAAItQ,MAAM,CAACzQ,QAAQ,EAAE;QACjB0hB,IAAI,CAACG,YAAY,CAACb,iBAAiB,EAAE,EAAE,CAAC;MAC5C;IACJ;IACA;IACAe,SAASA,CAACL,IAAI,EAAE;MACZ,MAAM9M,MAAM,GAAG,IAAI,CAACuM,MAAM,CAAC3P,GAAG,CAACkQ,IAAI,CAAC;MACpC,OAAO9M,MAAM,IAAI,IAAI,CAAC4M,aAAa,CAACE,IAAI,CAAC;IAC7C;IACA;IACAM,WAAWA,CAACN,IAAI,EAAE1hB,QAAQ,EAAE;MACxB,MAAM4U,MAAM,GAAG,IAAI,CAACuM,MAAM,CAAC3P,GAAG,CAACkQ,IAAI,CAAC;MACpC;MACA,IAAI9M,MAAM,EAAE;QACRA,MAAM,CAAC5U,QAAQ,GAAGA,QAAQ;QAC1B;MACJ;MACA;MACA;MACA,IAAIA,QAAQ,EAAE;QACV0hB,IAAI,CAACG,YAAY,CAACb,iBAAiB,EAAE,EAAE,CAAC;MAC5C,CAAC,MACI;QACDU,IAAI,CAACO,eAAe,CAACjB,iBAAiB,CAAC;MAC3C;IACJ;IACA;IACAQ,aAAaA,CAACE,IAAI,EAAE;MAChB,IAAI,CAAC,IAAI,CAAC5f,SAAS,EAAE;QACjB;MACJ;MACA,MAAMogB,cAAc,GAAG,IAAI,CAACf,MAAM,CAAC3P,GAAG,CAACkQ,IAAI,CAAC;MAC5C,IAAIQ,cAAc,EAAE;QAChB,OAAOA,cAAc;MACzB;MACA;MACAR,IAAI,CAACS,aAAa,CAAC,aAAa,CAAC,EAAEje,MAAM,CAAC,CAAC;MAC3C,MAAM8R,QAAQ,GAAG,IAAI,CAAClU,SAAS,CAAC6B,aAAa,CAAC,MAAM,CAAC;MACrDqS,QAAQ,CAACpS,SAAS,CAACC,GAAG,CAAC,YAAY,EAAE6d,IAAI,CAACU,YAAY,CAACtB,kBAAkB,CAAC,CAAC;MAC3EY,IAAI,CAACW,MAAM,CAACrM,QAAQ,CAAC;MACrB;MACA,MAAMpB,MAAM,GAAG,IAAI0D,SAAS,CAAC,IAAIxa,UAAU,CAACkY,QAAQ,CAAC,EAAE,IAAI,CAAC5C,OAAO,EAAE,IAAI,CAACE,SAAS,EAAE,IAAI,CAAC4N,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,GAAGrX,SAAS,EAAE,IAAI,CAAC6O,cAAc,GAAG,IAAI,CAACA,cAAc,GAAG7O,SAAS,CAAC;MAC9M+K,MAAM,CAAC/N,cAAc,GAAG,IAAI;MAC5B+N,MAAM,CAACgD,OAAO,GAAG8J,IAAI;MACrB9M,MAAM,CAACT,QAAQ,GAAGuN,IAAI,CAACI,YAAY,CAACf,iBAAiB,CAAC;MACtDnM,MAAM,CAAC5U,QAAQ,GAAG0hB,IAAI,CAACI,YAAY,CAACd,iBAAiB,CAAC;MACtD,IAAI,CAACsB,YAAY,CAACZ,IAAI,EAAE9M,MAAM,CAAC;MAC/B,OAAOA,MAAM;IACjB;IACA0N,YAAYA,CAACZ,IAAI,EAAE9M,MAAM,EAAE;MACvB8M,IAAI,CAACO,eAAe,CAACpB,sBAAsB,CAAC;MAC5C,IAAI,CAACM,MAAM,CAAClP,GAAG,CAACyP,IAAI,EAAE9M,MAAM,CAAC;IACjC;IACA+M,aAAaA,CAACD,IAAI,EAAE;MAChB,MAAM9M,MAAM,GAAG,IAAI,CAACuM,MAAM,CAAC3P,GAAG,CAACkQ,IAAI,CAAC;MACpC,IAAI9M,MAAM,EAAE;QACR;QACA;QACAA,MAAM,CAACkE,WAAW,CAAC,CAAC;QACpB,IAAI,CAACqI,MAAM,CAAC5O,MAAM,CAACmP,IAAI,CAAC;MAC5B;IACJ;IACA;MAAS,IAAI,CAAChf,IAAI,YAAA6f,wBAAA3f,CAAA;QAAA,YAAAA,CAAA,IAAwFqe,eAAe;MAAA,CAAoD;IAAE;IAC/K;MAAS,IAAI,CAACzT,KAAK,kBArxD6E9Q,EAAE,CAAA+Q,kBAAA;QAAAC,KAAA,EAqxDYuT,eAAe;QAAAxf,OAAA,EAAfwf,eAAe,CAAAve,IAAA;QAAAlB,UAAA,EAAc;MAAM,EAAG;IAAE;EAC1J;EAAC,OApHKyf,eAAe;AAAA;AAqHrB;EAAA,QAAAhf,SAAA,oBAAAA,SAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AAJA,IAKMugB,qBAAqB;EAA3B,MAAMA,qBAAqB,CAAC;IACxB;MAAS,IAAI,CAAC9f,IAAI,YAAA+f,8BAAA7f,CAAA;QAAA,YAAAA,CAAA,IAAwF4f,qBAAqB;MAAA,CAAmD;IAAE;IACpL;MAAS,IAAI,CAACvI,IAAI,kBAnyD8Evd,EAAE,CAAAwd,iBAAA;QAAAjX,IAAA,EAmyDJuf,qBAAqB;QAAAlT,SAAA;QAAAC,SAAA;QAAA4J,QAAA;QAAAC,YAAA,WAAAsJ,mCAAAhjB,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAnyDnBhD,EAAE,CAAA4c,WAAA,8BAAA3Z,GAAA,CAAAgjB,aAAA,KAmyDc,QAAE,CAAC;UAAA;QAAA;QAAAnJ,MAAA;UAAAmJ,aAAA;QAAA;QAAAnT,UAAA;QAAA4K,QAAA,GAnyDnB1d,EAAE,CAAA2d,mBAAA;QAAAuI,KAAA,EAAAjiB,GAAA;QAAAmb,kBAAA,EAAAlb,GAAA;QAAA0Z,KAAA;QAAAC,IAAA;QAAAC,QAAA,WAAAqI,+BAAAnjB,EAAA,EAAAC,GAAA;UAAA,IAAAD,EAAA;YAAFhD,EAAE,CAAAuf,eAAA;YAAFvf,EAAE,CAAAwf,YAAA,EAmyDqU,CAAC;UAAA;QAAA;QAAAxB,MAAA;QAAAC,aAAA;QAAAC,eAAA;MAAA,EAAkjD;IAAE;EACh+D;EAAC,OAHK4H,qBAAqB;AAAA;AAI3B;EAAA,QAAAvgB,SAAA,oBAAAA,SAAA;AAAA;;AAWA;AACA;AACA;;AAEA,SAASpB,eAAe,EAAEK,kBAAkB,EAAEuG,WAAW,EAAEsH,iBAAiB,EAAExN,sBAAsB,EAAE0H,gBAAgB,EAAE1B,eAAe,EAAEC,uBAAuB,EAAEmG,uBAAuB,EAAEsN,YAAY,EAAEF,2BAA2B,EAAE1C,yBAAyB,EAAE3W,eAAe,EAAEwN,OAAO,EAAEkB,aAAa,EAAE/B,mBAAmB,EAAE6M,WAAW,EAAEqB,SAAS,EAAEkE,eAAe,EAAErE,wBAAwB,EAAEtC,iBAAiB,EAAEe,uBAAuB,EAAEvC,SAAS,EAAE2I,eAAe,EAAErH,eAAe,EAAEnQ,iBAAiB,EAAEuE,gBAAgB,EAAEuC,SAAS,EAAE0C,cAAc,EAAE3C,WAAW,EAAE5B,4BAA4B,EAAEvQ,OAAO,EAAEoH,kBAAkB,EAAEid,qBAAqB,EAAE3C,6BAA6B,EAAEO,wBAAwB,EAAE1N,4BAA4B,EAAEjO,UAAU,EAAEO,kBAAkB,EAAEZ,aAAa,EAAEkC,eAAe,EAAEM,gBAAgB,EAAEzB,aAAa,EAAEoJ,wBAAwB,EAAEkB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}