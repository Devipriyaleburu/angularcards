{"ast":null,"code":"import { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { map, filter, debounceTime } from 'rxjs/operators';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record) {\n  // Ignore changes to comment text.\n  if (record.type === 'characterData' && record.target instanceof Comment) {\n    return true;\n  }\n  // Ignore addition / removal of comments.\n  if (record.type === 'childList') {\n    for (let i = 0; i < record.addedNodes.length; i++) {\n      if (!(record.addedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    for (let i = 0; i < record.removedNodes.length; i++) {\n      if (!(record.removedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Observe everything else.\n  return false;\n}\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nlet MutationObserverFactory = /*#__PURE__*/(() => {\n  class MutationObserverFactory {\n    create(callback) {\n      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n    static {\n      this.ɵfac = function MutationObserverFactory_Factory(t) {\n        return new (t || MutationObserverFactory)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MutationObserverFactory,\n        factory: MutationObserverFactory.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MutationObserverFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** An injectable service that allows watching elements for changes to their content. */\nlet ContentObserver = /*#__PURE__*/(() => {\n  class ContentObserver {\n    constructor(_mutationObserverFactory) {\n      this._mutationObserverFactory = _mutationObserverFactory;\n      /** Keeps track of the existing MutationObservers so they can be reused. */\n      this._observedElements = new Map();\n    }\n    ngOnDestroy() {\n      this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n      const element = coerceElement(elementOrRef);\n      return new Observable(observer => {\n        const stream = this._observeElement(element);\n        const subscription = stream.pipe(map(records => records.filter(record => !shouldIgnoreRecord(record))), filter(records => !!records.length)).subscribe(observer);\n        return () => {\n          subscription.unsubscribe();\n          this._unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n      if (!this._observedElements.has(element)) {\n        const stream = new Subject();\n        const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n        if (observer) {\n          observer.observe(element, {\n            characterData: true,\n            childList: true,\n            subtree: true\n          });\n        }\n        this._observedElements.set(element, {\n          observer,\n          stream,\n          count: 1\n        });\n      } else {\n        this._observedElements.get(element).count++;\n      }\n      return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n      if (this._observedElements.has(element)) {\n        this._observedElements.get(element).count--;\n        if (!this._observedElements.get(element).count) {\n          this._cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n      if (this._observedElements.has(element)) {\n        const {\n          observer,\n          stream\n        } = this._observedElements.get(element);\n        if (observer) {\n          observer.disconnect();\n        }\n        stream.complete();\n        this._observedElements.delete(element);\n      }\n    }\n    static {\n      this.ɵfac = function ContentObserver_Factory(t) {\n        return new (t || ContentObserver)(i0.ɵɵinject(MutationObserverFactory));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ContentObserver,\n        factory: ContentObserver.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ContentObserver;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nlet CdkObserveContent = /*#__PURE__*/(() => {\n  class CdkObserveContent {\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n      return this._debounce;\n    }\n    set debounce(value) {\n      this._debounce = coerceNumberProperty(value);\n      this._subscribe();\n    }\n    constructor(_contentObserver, _elementRef, _ngZone) {\n      this._contentObserver = _contentObserver;\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      /** Event emitted for each change in the element's content. */\n      this.event = new EventEmitter();\n      this._disabled = false;\n      this._currentSubscription = null;\n    }\n    ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n    ngOnDestroy() {\n      this._unsubscribe();\n    }\n    _subscribe() {\n      this._unsubscribe();\n      const stream = this._contentObserver.observe(this._elementRef);\n      // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n      // Consider brining it back inside the zone next time we're making breaking changes.\n      // Bringing it back inside can cause things like infinite change detection loops and changed\n      // after checked errors if people's code isn't handling it properly.\n      this._ngZone.runOutsideAngular(() => {\n        this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n      });\n    }\n    _unsubscribe() {\n      this._currentSubscription?.unsubscribe();\n    }\n    static {\n      this.ɵfac = function CdkObserveContent_Factory(t) {\n        return new (t || CdkObserveContent)(i0.ɵɵdirectiveInject(ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkObserveContent,\n        selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n        inputs: {\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkObserveContentDisabled\", \"disabled\", booleanAttribute],\n          debounce: \"debounce\"\n        },\n        outputs: {\n          event: \"cdkObserveContent\"\n        },\n        exportAs: [\"cdkObserveContent\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return CdkObserveContent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ObserversModule = /*#__PURE__*/(() => {\n  class ObserversModule {\n    static {\n      this.ɵfac = function ObserversModule_Factory(t) {\n        return new (t || ObserversModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: ObserversModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [MutationObserverFactory]\n      });\n    }\n  }\n  return ObserversModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"names":["coerceElement","coerceNumberProperty","i0","Injectable","EventEmitter","booleanAttribute","Directive","Output","Input","NgModule","Observable","Subject","map","filter","debounceTime","shouldIgnoreRecord","record","type","target","Comment","i","addedNodes","length","removedNodes","MutationObserverFactory","create","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","_","element","_cleanupObserver","observe","elementOrRef","observer","stream","_observeElement","subscription","pipe","records","subscribe","unsubscribe","_unobserveElement","has","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","CdkObserveContent","disabled","_disabled","value","_unsubscribe","_subscribe","debounce","_debounce","_contentObserver","_elementRef","_ngZone","event","_currentSubscription","ngAfterContentInit","runOutsideAngular","CdkObserveContent_Factory","ɵɵdirectiveInject","ElementRef","NgZone","ɵdir","ɵɵdefineDirective","selectors","inputs","ɵɵInputFlags","HasDecoratorInputTransform","outputs","exportAs","standalone","features","ɵɵInputTransformsFeature","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers"],"sources":["C:/Users/krava/OneDrive/Desktop/angular_cards/node_modules/@angular/cdk/fesm2022/observers.mjs"],"sourcesContent":["import { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { map, filter, debounceTime } from 'rxjs/operators';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record) {\n    // Ignore changes to comment text.\n    if (record.type === 'characterData' && record.target instanceof Comment) {\n        return true;\n    }\n    // Ignore addition / removal of comments.\n    if (record.type === 'childList') {\n        for (let i = 0; i < record.addedNodes.length; i++) {\n            if (!(record.addedNodes[i] instanceof Comment)) {\n                return false;\n            }\n        }\n        for (let i = 0; i < record.removedNodes.length; i++) {\n            if (!(record.removedNodes[i] instanceof Comment)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Observe everything else.\n    return false;\n}\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MutationObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MutationObserverFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MutationObserverFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /** Keeps track of the existing MutationObservers so they can be reused. */\n        this._observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this._observeElement(element);\n            const subscription = stream\n                .pipe(map(records => records.filter(record => !shouldIgnoreRecord(record))), filter(records => !!records.length))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true,\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            this._observedElements.get(element).count--;\n            if (!this._observedElements.get(element).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = this._observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ContentObserver, deps: [{ token: MutationObserverFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ContentObserver, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ContentObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: MutationObserverFactory }] });\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n        return this._debounce;\n    }\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    _subscribe() {\n        this._unsubscribe();\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    _unsubscribe() {\n        this._currentSubscription?.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkObserveContent, deps: [{ token: ContentObserver }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkObserveContent, isStandalone: true, selector: \"[cdkObserveContent]\", inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\", booleanAttribute], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkObserveContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: ContentObserver }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { event: [{\n                type: Output,\n                args: ['cdkObserveContent']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkObserveContentDisabled', transform: booleanAttribute }]\n            }], debounce: [{\n                type: Input\n            }] } });\nclass ObserversModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, imports: [CdkObserveContent], exports: [CdkObserveContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, providers: [MutationObserverFactory] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkObserveContent],\n                    exports: [CdkObserveContent],\n                    providers: [MutationObserverFactory],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}